
5_MMA845x_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800405c  0800405c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004064  08004064  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800406c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000090  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ac1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001564  00000000  00000000  00027b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  000290c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000730  00000000  00000000  00029898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d4d  00000000  00000000  00029fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009761  00000000  00000000  0004ad15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c43a2  00000000  00000000  00054476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118818  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002834  00000000  00000000  00118868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f88 	.word	0x08003f88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003f88 	.word	0x08003f88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <main>:
uint8_t RxBuffer[1];
uint8_t TxBuffer[1]={0x0D};


int main(void)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b099      	sub	sp, #100	; 0x64
 80005c8:	af14      	add	r7, sp, #80	; 0x50

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fc67 	bl	8000e9c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 fa4d 	bl	8000a6c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fad7 	bl	8000b84 <MX_GPIO_Init>

  MX_I2C1_Init();
 80005d6:	f000 faa7 	bl	8000b28 <MX_I2C1_Init>

  retval = MMA845x_Test_Sensor(hi2c1, MMA845x_DEVICE_ADDR);
 80005da:	4c2b      	ldr	r4, [pc, #172]	; (8000688 <main+0xc4>)
 80005dc:	231c      	movs	r3, #28
 80005de:	9311      	str	r3, [sp, #68]	; 0x44
 80005e0:	4668      	mov	r0, sp
 80005e2:	f104 0310 	add.w	r3, r4, #16
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	4619      	mov	r1, r3
 80005ea:	f002 fccb 	bl	8002f84 <memcpy>
 80005ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005f2:	f000 f9f1 	bl	80009d8 <MMA845x_Test_Sensor>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a24      	ldr	r2, [pc, #144]	; (800068c <main+0xc8>)
 80005fa:	6013      	str	r3, [r2, #0]
  Sensor_ID_Response = MMA845x_Read_ID(hi2c1, MMA845x_DEVICE_ADDR, MMA845x_WHO_AM_I_REG);
 80005fc:	4c22      	ldr	r4, [pc, #136]	; (8000688 <main+0xc4>)
 80005fe:	230d      	movs	r3, #13
 8000600:	9312      	str	r3, [sp, #72]	; 0x48
 8000602:	231c      	movs	r3, #28
 8000604:	9311      	str	r3, [sp, #68]	; 0x44
 8000606:	4668      	mov	r0, sp
 8000608:	f104 0310 	add.w	r3, r4, #16
 800060c:	2244      	movs	r2, #68	; 0x44
 800060e:	4619      	mov	r1, r3
 8000610:	f002 fcb8 	bl	8002f84 <memcpy>
 8000614:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000618:	f000 fa00 	bl	8000a1c <MMA845x_Read_ID>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <main+0xcc>)
 8000622:	701a      	strb	r2, [r3, #0]

  MMA845x_Set_Sensor_State(SENSOR_STANDBY);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f989 	bl	800093c <MMA845x_Set_Sensor_State>

  MMA845x_Set_Sensor_State(SENSOR_ACTIVE);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 f986 	bl	800093c <MMA845x_Set_Sensor_State>
  uint16_t z;


   while (1)
  {
	   Data1 =  MMA845x_Read_Sensor_Value();
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f8cc 	bl	80007d0 <MMA845x_Read_Sensor_Value>
	   x = Data1.x_data;
 8000638:	88bb      	ldrh	r3, [r7, #4]
 800063a:	81fb      	strh	r3, [r7, #14]
	   y = Data1.y_data;
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	81bb      	strh	r3, [r7, #12]
	   z = Data1.z_data;
 8000640:	893b      	ldrh	r3, [r7, #8]
 8000642:	817b      	strh	r3, [r7, #10]

       // Test data with SCI_s12dec_Out
       printf("X: ");
 8000644:	4813      	ldr	r0, [pc, #76]	; (8000694 <main+0xd0>)
 8000646:	f002 fcb3 	bl	8002fb0 <iprintf>
       SCI_s12dec_Out(x);
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f843 	bl	80006d8 <SCI_s12dec_Out>
       printf("\n");
 8000652:	200a      	movs	r0, #10
 8000654:	f002 fcc4 	bl	8002fe0 <putchar>

       printf("Y: ");
 8000658:	480f      	ldr	r0, [pc, #60]	; (8000698 <main+0xd4>)
 800065a:	f002 fca9 	bl	8002fb0 <iprintf>
       SCI_s12dec_Out(y);
 800065e:	89bb      	ldrh	r3, [r7, #12]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f839 	bl	80006d8 <SCI_s12dec_Out>
       printf("\n");
 8000666:	200a      	movs	r0, #10
 8000668:	f002 fcba 	bl	8002fe0 <putchar>

       printf("Z: ");
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <main+0xd8>)
 800066e:	f002 fc9f 	bl	8002fb0 <iprintf>
       SCI_s12dec_Out(z);
 8000672:	897b      	ldrh	r3, [r7, #10]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f82f 	bl	80006d8 <SCI_s12dec_Out>
       printf("\n");
 800067a:	200a      	movs	r0, #10
 800067c:	f002 fcb0 	bl	8002fe0 <putchar>

       HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f000 fc7d 	bl	8000f80 <HAL_Delay>
	   Data1 =  MMA845x_Read_Sensor_Value();
 8000686:	e7d3      	b.n	8000630 <main+0x6c>
 8000688:	2000008c 	.word	0x2000008c
 800068c:	200000e0 	.word	0x200000e0
 8000690:	200000e4 	.word	0x200000e4
 8000694:	08003fa0 	.word	0x08003fa0
 8000698:	08003fa4 	.word	0x08003fa4
 800069c:	08003fa8 	.word	0x08003fa8

080006a0 <_write>:
  }

}

int _write(int file, char *ptr, int len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	e009      	b.n	80006c6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	60ba      	str	r2, [r7, #8]
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff5a 	bl	8000574 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	3301      	adds	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	dbf1      	blt.n	80006b2 <_write+0x12>
  }
  return len;
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <SCI_s12dec_Out>:

void SCI_s12dec_Out(uint16_t sensor_data)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
    uint16_t r;

    /*
     ** Check data's sign
     */
    if (sensor_data > 0x7FF)
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006e8:	d309      	bcc.n	80006fe <SCI_s12dec_Out+0x26>
    {
    	putchar('-');
 80006ea:	202d      	movs	r0, #45	; 0x2d
 80006ec:	f002 fc78 	bl	8002fe0 <putchar>
    	sensor_data = (~sensor_data + 1) & 0x0FFF; // 2's complement and 12-bit mask
 80006f0:	88fb      	ldrh	r3, [r7, #6]
 80006f2:	425b      	negs	r3, r3
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006fa:	80fb      	strh	r3, [r7, #6]
 80006fc:	e002      	b.n	8000704 <SCI_s12dec_Out+0x2c>
    }
    else
    {
    	putchar('+');
 80006fe:	202b      	movs	r0, #43	; 0x2b
 8000700:	f002 fc6e 	bl	8002fe0 <putchar>
    }


    thousands = (uint8_t)(sensor_data / 1000);
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4a2f      	ldr	r2, [pc, #188]	; (80007c4 <SCI_s12dec_Out+0xec>)
 8000708:	fba2 2303 	umull	r2, r3, r2, r3
 800070c:	099b      	lsrs	r3, r3, #6
 800070e:	b29b      	uxth	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
    r = sensor_data % 1000;
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	4a2b      	ldr	r2, [pc, #172]	; (80007c4 <SCI_s12dec_Out+0xec>)
 8000716:	fba2 1203 	umull	r1, r2, r2, r3
 800071a:	0992      	lsrs	r2, r2, #6
 800071c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000720:	fb01 f202 	mul.w	r2, r1, r2
 8000724:	1a9b      	subs	r3, r3, r2
 8000726:	817b      	strh	r3, [r7, #10]
    hundreds = (uint8_t)(r / 100);
 8000728:	897b      	ldrh	r3, [r7, #10]
 800072a:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <SCI_s12dec_Out+0xf0>)
 800072c:	fba2 2303 	umull	r2, r3, r2, r3
 8000730:	095b      	lsrs	r3, r3, #5
 8000732:	b29b      	uxth	r3, r3
 8000734:	73bb      	strb	r3, [r7, #14]
    r = (uint8_t)(r % 100);
 8000736:	897b      	ldrh	r3, [r7, #10]
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <SCI_s12dec_Out+0xf0>)
 800073a:	fba2 1203 	umull	r1, r2, r2, r3
 800073e:	0952      	lsrs	r2, r2, #5
 8000740:	2164      	movs	r1, #100	; 0x64
 8000742:	fb01 f202 	mul.w	r2, r1, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	b29b      	uxth	r3, r3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	817b      	strh	r3, [r7, #10]
    tens = (uint8_t)(r / 10);
 800074e:	897b      	ldrh	r3, [r7, #10]
 8000750:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <SCI_s12dec_Out+0xf4>)
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	b29b      	uxth	r3, r3
 800075a:	737b      	strb	r3, [r7, #13]
    ones = (uint8_t)(r % 10);
 800075c:	897a      	ldrh	r2, [r7, #10]
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <SCI_s12dec_Out+0xf4>)
 8000760:	fba3 1302 	umull	r1, r3, r3, r2
 8000764:	08d9      	lsrs	r1, r3, #3
 8000766:	460b      	mov	r3, r1
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	440b      	add	r3, r1
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	b29b      	uxth	r3, r3
 8000772:	727b      	strb	r3, [r7, #9]

    /*
     ** Format adjustment for leading zeros
     */
    if (thousands == 0)
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10b      	bne.n	8000792 <SCI_s12dec_Out+0xba>
    {
    	thousands = 0xF0;
 800077a:	23f0      	movs	r3, #240	; 0xf0
 800077c:	73fb      	strb	r3, [r7, #15]
        if (hundreds == 0)
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <SCI_s12dec_Out+0xb0>
        {
        	hundreds = 0xF0;
 8000784:	23f0      	movs	r3, #240	; 0xf0
 8000786:	73bb      	strb	r3, [r7, #14]
        }
        	if (tens == 0)
 8000788:	7b7b      	ldrb	r3, [r7, #13]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d101      	bne.n	8000792 <SCI_s12dec_Out+0xba>
        	{
        		tens = 0xF0;
 800078e:	23f0      	movs	r3, #240	; 0xf0
 8000790:	737b      	strb	r3, [r7, #13]
    }

    /*
     ** Output result
     */
    putchar(thousands + '0');
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	3330      	adds	r3, #48	; 0x30
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fc22 	bl	8002fe0 <putchar>
    putchar(hundreds + '0');
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	3330      	adds	r3, #48	; 0x30
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fc1d 	bl	8002fe0 <putchar>
    putchar(tens + '0');
 80007a6:	7b7b      	ldrb	r3, [r7, #13]
 80007a8:	3330      	adds	r3, #48	; 0x30
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fc18 	bl	8002fe0 <putchar>
    putchar(ones + '0');
 80007b0:	7a7b      	ldrb	r3, [r7, #9]
 80007b2:	3330      	adds	r3, #48	; 0x30
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fc13 	bl	8002fe0 <putchar>
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	10624dd3 	.word	0x10624dd3
 80007c8:	51eb851f 	.word	0x51eb851f
 80007cc:	cccccccd 	.word	0xcccccccd

080007d0 <MMA845x_Read_Sensor_Value>:

SensorData MMA845x_Read_Sensor_Value(){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af04      	add	r7, sp, #16
 80007d6:	6078      	str	r0, [r7, #4]
	uint8_t reg_status;
	uint8_t xyz_data_val[6];

	SensorData Data;
	HAL_StatusTypeDef ret_val = HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_STATUS_REG, REG_SIZE, &reg_status, 1, 100);
 80007d8:	2364      	movs	r3, #100	; 0x64
 80007da:	9302      	str	r3, [sp, #8]
 80007dc:	2301      	movs	r3, #1
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	f107 0316 	add.w	r3, r7, #22
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	2200      	movs	r2, #0
 80007ea:	2138      	movs	r1, #56	; 0x38
 80007ec:	4852      	ldr	r0, [pc, #328]	; (8000938 <MMA845x_Read_Sensor_Value+0x168>)
 80007ee:	f001 f8ab 	bl	8001948 <HAL_I2C_Mem_Read>
 80007f2:	4603      	mov	r3, r0
 80007f4:	75fb      	strb	r3, [r7, #23]
	if(HAL_ERROR == ret_val){
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d111      	bne.n	8000820 <MMA845x_Read_Sensor_Value+0x50>
		Data.x_data = -2;
 80007fc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000800:	813b      	strh	r3, [r7, #8]
		Data.y_data = -2;
 8000802:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000806:	817b      	strh	r3, [r7, #10]
		Data.z_data = -2;
 8000808:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800080c:	81bb      	strh	r3, [r7, #12]
		return Data;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	461a      	mov	r2, r3
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	6010      	str	r0, [r2, #0]
 800081a:	889b      	ldrh	r3, [r3, #4]
 800081c:	8093      	strh	r3, [r2, #4]
 800081e:	e086      	b.n	800092e <MMA845x_Read_Sensor_Value+0x15e>
	}

	/*Check X, Y, Z-axis new data ready. Polling ... */
	if(reg_status & ZYXDR_BIT){
 8000820:	7dbb      	ldrb	r3, [r7, #22]
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d052      	beq.n	80008d0 <MMA845x_Read_Sensor_Value+0x100>
		/*Read  */
		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_OUT_X_MSB, REG_SIZE, &xyz_data_val [0], 1, 100);
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	2301      	movs	r3, #1
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	2201      	movs	r2, #1
 800083c:	2138      	movs	r1, #56	; 0x38
 800083e:	483e      	ldr	r0, [pc, #248]	; (8000938 <MMA845x_Read_Sensor_Value+0x168>)
 8000840:	f001 f882 	bl	8001948 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_OUT_X_LSB, REG_SIZE, &xyz_data_val [1], 1, 100);
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	2301      	movs	r3, #1
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	3301      	adds	r3, #1
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	2202      	movs	r2, #2
 8000858:	2138      	movs	r1, #56	; 0x38
 800085a:	4837      	ldr	r0, [pc, #220]	; (8000938 <MMA845x_Read_Sensor_Value+0x168>)
 800085c:	f001 f874 	bl	8001948 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_OUT_Y_MSB, REG_SIZE, &xyz_data_val [2], 1, 100);
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	9302      	str	r3, [sp, #8]
 8000864:	2301      	movs	r3, #1
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	3302      	adds	r3, #2
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2301      	movs	r3, #1
 8000872:	2203      	movs	r2, #3
 8000874:	2138      	movs	r1, #56	; 0x38
 8000876:	4830      	ldr	r0, [pc, #192]	; (8000938 <MMA845x_Read_Sensor_Value+0x168>)
 8000878:	f001 f866 	bl	8001948 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_OUT_Y_LSB, REG_SIZE, &xyz_data_val [3], 1, 100);
 800087c:	2364      	movs	r3, #100	; 0x64
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	2301      	movs	r3, #1
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	3303      	adds	r3, #3
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2301      	movs	r3, #1
 800088e:	2204      	movs	r2, #4
 8000890:	2138      	movs	r1, #56	; 0x38
 8000892:	4829      	ldr	r0, [pc, #164]	; (8000938 <MMA845x_Read_Sensor_Value+0x168>)
 8000894:	f001 f858 	bl	8001948 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_OUT_Z_MSB, REG_SIZE, &xyz_data_val [4], 1, 100);
 8000898:	2364      	movs	r3, #100	; 0x64
 800089a:	9302      	str	r3, [sp, #8]
 800089c:	2301      	movs	r3, #1
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	3304      	adds	r3, #4
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2301      	movs	r3, #1
 80008aa:	2205      	movs	r2, #5
 80008ac:	2138      	movs	r1, #56	; 0x38
 80008ae:	4822      	ldr	r0, [pc, #136]	; (8000938 <MMA845x_Read_Sensor_Value+0x168>)
 80008b0:	f001 f84a 	bl	8001948 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_OUT_Z_LSB, REG_SIZE, &xyz_data_val [5], 1, 100);
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	9302      	str	r3, [sp, #8]
 80008b8:	2301      	movs	r3, #1
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	3305      	adds	r3, #5
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2301      	movs	r3, #1
 80008c6:	2206      	movs	r2, #6
 80008c8:	2138      	movs	r1, #56	; 0x38
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MMA845x_Read_Sensor_Value+0x168>)
 80008cc:	f001 f83c 	bl	8001948 <HAL_I2C_Mem_Read>
	}
	Data.x_data = (xyz_data_val[0] << 8) | xyz_data_val[1];
 80008d0:	7c3b      	ldrb	r3, [r7, #16]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7c7b      	ldrb	r3, [r7, #17]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21b      	sxth	r3, r3
 80008de:	b29b      	uxth	r3, r3
 80008e0:	813b      	strh	r3, [r7, #8]
	Data.x_data >>= 4;
 80008e2:	893b      	ldrh	r3, [r7, #8]
 80008e4:	091b      	lsrs	r3, r3, #4
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	813b      	strh	r3, [r7, #8]

	Data.y_data = (xyz_data_val[2] << 8) | xyz_data_val[3];
 80008ea:	7cbb      	ldrb	r3, [r7, #18]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	7cfb      	ldrb	r3, [r7, #19]
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	817b      	strh	r3, [r7, #10]
	Data.y_data >>= 4;
 80008fc:	897b      	ldrh	r3, [r7, #10]
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	b29b      	uxth	r3, r3
 8000902:	817b      	strh	r3, [r7, #10]

	Data.z_data = (xyz_data_val[4] << 8) | xyz_data_val[5];
 8000904:	7d3b      	ldrb	r3, [r7, #20]
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	b21a      	sxth	r2, r3
 800090a:	7d7b      	ldrb	r3, [r7, #21]
 800090c:	b21b      	sxth	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b21b      	sxth	r3, r3
 8000912:	b29b      	uxth	r3, r3
 8000914:	81bb      	strh	r3, [r7, #12]
	Data.z_data >>= 4;
 8000916:	89bb      	ldrh	r3, [r7, #12]
 8000918:	091b      	lsrs	r3, r3, #4
 800091a:	b29b      	uxth	r3, r3
 800091c:	81bb      	strh	r3, [r7, #12]

	return Data;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	461a      	mov	r2, r3
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	6010      	str	r0, [r2, #0]
 800092a:	889b      	ldrh	r3, [r3, #4]
 800092c:	8093      	strh	r3, [r2, #4]
}
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000008c 	.word	0x2000008c

0800093c <MMA845x_Set_Sensor_State>:
	return SENSOR_OK;


}

SensorMode MMA845x_Set_Sensor_State(SensorStates states){
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af04      	add	r7, sp, #16
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_status;
	HAL_StatusTypeDef retval;
	retval = HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL1_REG, REG_SIZE, &reg_status, 1, 100);
 8000946:	2364      	movs	r3, #100	; 0x64
 8000948:	9302      	str	r3, [sp, #8]
 800094a:	2301      	movs	r3, #1
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	f107 030e 	add.w	r3, r7, #14
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2301      	movs	r3, #1
 8000956:	222a      	movs	r2, #42	; 0x2a
 8000958:	2138      	movs	r1, #56	; 0x38
 800095a:	481e      	ldr	r0, [pc, #120]	; (80009d4 <MMA845x_Set_Sensor_State+0x98>)
 800095c:	f000 fff4 	bl	8001948 <HAL_I2C_Mem_Read>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]

	if(HAL_ERROR == retval)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d101      	bne.n	800096e <MMA845x_Set_Sensor_State+0x32>
		return SENSOR_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e02e      	b.n	80009cc <MMA845x_Set_Sensor_State+0x90>

	if(SENSOR_STANDBY == states ){
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d113      	bne.n	800099c <MMA845x_Set_Sensor_State+0x60>
		reg_status &= ~(ACTIVE_MASK_BIT);
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	f023 0301 	bic.w	r3, r3, #1
 800097a:	b2db      	uxtb	r3, r3
 800097c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL1_REG, REG_SIZE, &reg_status, 1, 100);
 800097e:	2364      	movs	r3, #100	; 0x64
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	2301      	movs	r3, #1
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	f107 030e 	add.w	r3, r7, #14
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2301      	movs	r3, #1
 800098e:	222a      	movs	r2, #42	; 0x2a
 8000990:	2138      	movs	r1, #56	; 0x38
 8000992:	4810      	ldr	r0, [pc, #64]	; (80009d4 <MMA845x_Set_Sensor_State+0x98>)
 8000994:	f000 fede 	bl	8001754 <HAL_I2C_Mem_Write>
		return SENSOR_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	e017      	b.n	80009cc <MMA845x_Set_Sensor_State+0x90>
	}else if(SENSOR_ACTIVE == states){
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d113      	bne.n	80009ca <MMA845x_Set_Sensor_State+0x8e>
		reg_status |= (ACTIVE_MASK_BIT);
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL1_REG, REG_SIZE, &reg_status, 1 , 100);
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	9302      	str	r3, [sp, #8]
 80009b0:	2301      	movs	r3, #1
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	f107 030e 	add.w	r3, r7, #14
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	222a      	movs	r2, #42	; 0x2a
 80009be:	2138      	movs	r1, #56	; 0x38
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MMA845x_Set_Sensor_State+0x98>)
 80009c2:	f000 fec7 	bl	8001754 <HAL_I2C_Mem_Write>
		return SENSOR_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e000      	b.n	80009cc <MMA845x_Set_Sensor_State+0x90>
	}
	return SENSOR_ERROR;
 80009ca:	2301      	movs	r3, #1

}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000008c 	.word	0x2000008c

080009d8 <MMA845x_Test_Sensor>:

int MMA845x_Test_Sensor(I2C_HandleTypeDef hi2c, uint8_t Device_Addres){
 80009d8:	b084      	sub	sp, #16
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	f107 0c10 	add.w	ip, r7, #16
 80009e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_StatusTypeDef status;

	status = HAL_I2C_IsDeviceReady(&hi2c, (Device_Addres << 1), 4, 100);
 80009e8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	b299      	uxth	r1, r3
 80009f2:	2364      	movs	r3, #100	; 0x64
 80009f4:	2204      	movs	r2, #4
 80009f6:	f107 0010 	add.w	r0, r7, #16
 80009fa:	f001 f9cb 	bl	8001d94 <HAL_I2C_IsDeviceReady>
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	if(status == HAL_OK)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d101      	bne.n	8000a0c <MMA845x_Test_Sensor+0x34>
		return 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <MMA845x_Test_Sensor+0x36>
	else
		return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <MMA845x_Read_ID>:

uint8_t MMA845x_Read_ID(I2C_HandleTypeDef hi2c, uint8_t Device_Addres, uint8_t RegAddress){
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af04      	add	r7, sp, #16
 8000a24:	f107 0c10 	add.w	ip, r7, #16
 8000a28:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t RxBuffer[1];
	HAL_I2C_Mem_Read(&hi2c, (Device_Addres << 1), RegAddress, REG_SIZE, RxBuffer, 1, 100);
 8000a2c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	b299      	uxth	r1, r3
 8000a36:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	2364      	movs	r3, #100	; 0x64
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	2301      	movs	r3, #1
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	f107 0010 	add.w	r0, r7, #16
 8000a4e:	f000 ff7b 	bl	8001948 <HAL_I2C_Mem_Read>

	if(0x2A == RxBuffer[0])
 8000a52:	793b      	ldrb	r3, [r7, #4]
 8000a54:	2b2a      	cmp	r3, #42	; 0x2a
 8000a56:	d101      	bne.n	8000a5c <MMA845x_Read_ID+0x40>
		return *RxBuffer;
 8000a58:	793b      	ldrb	r3, [r7, #4]
 8000a5a:	e000      	b.n	8000a5e <MMA845x_Read_ID+0x42>
	else
		return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	; 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	2230      	movs	r2, #48	; 0x30
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fa90 	bl	8002fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <SystemClock_Config+0xb4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <SystemClock_Config+0xb4>)
 8000a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <SystemClock_Config+0xb4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <SystemClock_Config+0xb8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <SystemClock_Config+0xb8>)
 8000ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <SystemClock_Config+0xb8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 fde3 	bl	80026a8 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ae8:	f000 f874 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 f846 	bl	8002b98 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b12:	f000 f85f 	bl	8000bd4 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3750      	adds	r7, #80	; 0x50
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b34:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x58>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b66:	f000 fcb1 	bl	80014cc <HAL_I2C_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b70:	f000 f830 	bl	8000bd4 <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000008c 	.word	0x2000008c
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	000186a0 	.word	0x000186a0

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0x4c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <MX_GPIO_Init+0x4c>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_GPIO_Init+0x4c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_GPIO_Init+0x4c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <MX_GPIO_Init+0x4c>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_GPIO_Init+0x4c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_I2C_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6e:	23c0      	movs	r3, #192	; 0xc0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	2312      	movs	r3, #18
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <HAL_I2C_MspInit+0x8c>)
 8000c8a:	f000 fa83 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
 }
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */

}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f918 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e00a      	b.n	8000d3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d26:	f3af 8000 	nop.w
 8000d2a:	4601      	mov	r1, r0
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	60ba      	str	r2, [r7, #8]
 8000d32:	b2ca      	uxtb	r2, r1
 8000d34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	dbf0      	blt.n	8000d26 <_read+0x12>
  }

  return len;
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d76:	605a      	str	r2, [r3, #4]
  return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_isatty>:

int _isatty(int file)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f002 f8a2 	bl	8002f30 <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20020000 	.word	0x20020000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	200000e8 	.word	0x200000e8
 8000e20:	20000100 	.word	0x20000100

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd7 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f002 f861 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fba3 	bl	80005c4 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e8c:	0800406c 	.word	0x0800406c
  ldr r2, =_sbss
 8000e90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e94:	20000100 	.word	0x20000100

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f931 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fe86 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f93b 	bl	800117a <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f911 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	200000ec 	.word	0x200000ec

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200000ec 	.word	0x200000ec

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <__NVIC_SetPriorityGrouping>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_SetPriority>:
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff47 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff5c 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffb0 	bl	80010e8 <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e16b      	b.n	8001488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 815a 	bne.w	8001482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d017      	beq.n	8001284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80b4 	beq.w	8001482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a5f      	ldr	r2, [pc, #380]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a5b      	ldr	r2, [pc, #364]	; (80014a4 <HAL_GPIO_Init+0x310>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d02b      	beq.n	80013ba <HAL_GPIO_Init+0x226>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a51      	ldr	r2, [pc, #324]	; (80014ac <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d025      	beq.n	80013b6 <HAL_GPIO_Init+0x222>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a50      	ldr	r2, [pc, #320]	; (80014b0 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01f      	beq.n	80013b2 <HAL_GPIO_Init+0x21e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x21a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_GPIO_Init+0x324>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x216>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <HAL_GPIO_Init+0x328>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x212>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4c      	ldr	r2, [pc, #304]	; (80014c0 <HAL_GPIO_Init+0x32c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <HAL_GPIO_Init+0x330>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x20a>
 800139a:	2307      	movs	r3, #7
 800139c:	e00e      	b.n	80013bc <HAL_GPIO_Init+0x228>
 800139e:	2308      	movs	r3, #8
 80013a0:	e00c      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e00a      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x310>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_GPIO_Init+0x334>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a32      	ldr	r2, [pc, #200]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a27      	ldr	r2, [pc, #156]	; (80014c8 <HAL_GPIO_Init+0x334>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_GPIO_Init+0x334>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <HAL_GPIO_Init+0x334>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f ae90 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021c00 	.word	0x40021c00
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e12b      	b.n	8001736 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fb9c 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2224      	movs	r2, #36	; 0x24
 80014fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800151e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800152e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001530:	f001 fcea 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8001534:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4a81      	ldr	r2, [pc, #516]	; (8001740 <HAL_I2C_Init+0x274>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d807      	bhi.n	8001550 <HAL_I2C_Init+0x84>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4a80      	ldr	r2, [pc, #512]	; (8001744 <HAL_I2C_Init+0x278>)
 8001544:	4293      	cmp	r3, r2
 8001546:	bf94      	ite	ls
 8001548:	2301      	movls	r3, #1
 800154a:	2300      	movhi	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	e006      	b.n	800155e <HAL_I2C_Init+0x92>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4a7d      	ldr	r2, [pc, #500]	; (8001748 <HAL_I2C_Init+0x27c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	bf94      	ite	ls
 8001558:	2301      	movls	r3, #1
 800155a:	2300      	movhi	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0e7      	b.n	8001736 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4a78      	ldr	r2, [pc, #480]	; (800174c <HAL_I2C_Init+0x280>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9b      	lsrs	r3, r3, #18
 8001570:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a6a      	ldr	r2, [pc, #424]	; (8001740 <HAL_I2C_Init+0x274>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d802      	bhi.n	80015a0 <HAL_I2C_Init+0xd4>
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3301      	adds	r3, #1
 800159e:	e009      	b.n	80015b4 <HAL_I2C_Init+0xe8>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4a69      	ldr	r2, [pc, #420]	; (8001750 <HAL_I2C_Init+0x284>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	3301      	adds	r3, #1
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	495c      	ldr	r1, [pc, #368]	; (8001740 <HAL_I2C_Init+0x274>)
 80015d0:	428b      	cmp	r3, r1
 80015d2:	d819      	bhi.n	8001608 <HAL_I2C_Init+0x13c>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1e59      	subs	r1, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fbb1 f3f3 	udiv	r3, r1, r3
 80015e2:	1c59      	adds	r1, r3, #1
 80015e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015e8:	400b      	ands	r3, r1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00a      	beq.n	8001604 <HAL_I2C_Init+0x138>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1e59      	subs	r1, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001602:	e051      	b.n	80016a8 <HAL_I2C_Init+0x1dc>
 8001604:	2304      	movs	r3, #4
 8001606:	e04f      	b.n	80016a8 <HAL_I2C_Init+0x1dc>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d111      	bne.n	8001634 <HAL_I2C_Init+0x168>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e58      	subs	r0, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	440b      	add	r3, r1
 800161e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001622:	3301      	adds	r3, #1
 8001624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	e012      	b.n	800165a <HAL_I2C_Init+0x18e>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	0099      	lsls	r1, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_I2C_Init+0x196>
 800165e:	2301      	movs	r3, #1
 8001660:	e022      	b.n	80016a8 <HAL_I2C_Init+0x1dc>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10e      	bne.n	8001688 <HAL_I2C_Init+0x1bc>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1e58      	subs	r0, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6859      	ldr	r1, [r3, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	440b      	add	r3, r1
 8001678:	fbb0 f3f3 	udiv	r3, r0, r3
 800167c:	3301      	adds	r3, #1
 800167e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001686:	e00f      	b.n	80016a8 <HAL_I2C_Init+0x1dc>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e58      	subs	r0, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	0099      	lsls	r1, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	fbb0 f3f3 	udiv	r3, r0, r3
 800169e:	3301      	adds	r3, #1
 80016a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	6809      	ldr	r1, [r1, #0]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69da      	ldr	r2, [r3, #28]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6911      	ldr	r1, [r2, #16]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68d2      	ldr	r2, [r2, #12]
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2220      	movs	r2, #32
 8001722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	000186a0 	.word	0x000186a0
 8001744:	001e847f 	.word	0x001e847f
 8001748:	003d08ff 	.word	0x003d08ff
 800174c:	431bde83 	.word	0x431bde83
 8001750:	10624dd3 	.word	0x10624dd3

08001754 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af02      	add	r7, sp, #8
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4603      	mov	r3, r0
 8001764:	817b      	strh	r3, [r7, #10]
 8001766:	460b      	mov	r3, r1
 8001768:	813b      	strh	r3, [r7, #8]
 800176a:	4613      	mov	r3, r2
 800176c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800176e:	f7ff fbfb 	bl	8000f68 <HAL_GetTick>
 8001772:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b20      	cmp	r3, #32
 800177e:	f040 80d9 	bne.w	8001934 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2319      	movs	r3, #25
 8001788:	2201      	movs	r2, #1
 800178a:	496d      	ldr	r1, [pc, #436]	; (8001940 <HAL_I2C_Mem_Write+0x1ec>)
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 fdad 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001798:	2302      	movs	r3, #2
 800179a:	e0cc      	b.n	8001936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_I2C_Mem_Write+0x56>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e0c5      	b.n	8001936 <HAL_I2C_Mem_Write+0x1e2>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d007      	beq.n	80017d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2221      	movs	r2, #33	; 0x21
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2240      	movs	r2, #64	; 0x40
 80017ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_I2C_Mem_Write+0x1f0>)
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001812:	88f8      	ldrh	r0, [r7, #6]
 8001814:	893a      	ldrh	r2, [r7, #8]
 8001816:	8979      	ldrh	r1, [r7, #10]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	4603      	mov	r3, r0
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fbe4 	bl	8001ff0 <I2C_RequestMemoryWrite>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d052      	beq.n	80018d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e081      	b.n	8001936 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fe2e 	bl	8002498 <I2C_WaitOnTXEFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00d      	beq.n	800185e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2b04      	cmp	r3, #4
 8001848:	d107      	bne.n	800185a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001858:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06b      	b.n	8001936 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b04      	cmp	r3, #4
 800189a:	d11b      	bne.n	80018d4 <HAL_I2C_Mem_Write+0x180>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d017      	beq.n	80018d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1aa      	bne.n	8001832 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 fe1a 	bl	800251a <I2C_WaitOnBTFFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00d      	beq.n	8001908 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d107      	bne.n	8001904 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001902:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e016      	b.n	8001936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
  }
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	00100002 	.word	0x00100002
 8001944:	ffff0000 	.word	0xffff0000

08001948 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	4608      	mov	r0, r1
 8001952:	4611      	mov	r1, r2
 8001954:	461a      	mov	r2, r3
 8001956:	4603      	mov	r3, r0
 8001958:	817b      	strh	r3, [r7, #10]
 800195a:	460b      	mov	r3, r1
 800195c:	813b      	strh	r3, [r7, #8]
 800195e:	4613      	mov	r3, r2
 8001960:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001962:	f7ff fb01 	bl	8000f68 <HAL_GetTick>
 8001966:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b20      	cmp	r3, #32
 8001972:	f040 8208 	bne.w	8001d86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2319      	movs	r3, #25
 800197c:	2201      	movs	r2, #1
 800197e:	497b      	ldr	r1, [pc, #492]	; (8001b6c <HAL_I2C_Mem_Read+0x224>)
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 fcb3 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800198c:	2302      	movs	r3, #2
 800198e:	e1fb      	b.n	8001d88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_I2C_Mem_Read+0x56>
 800199a:	2302      	movs	r3, #2
 800199c:	e1f4      	b.n	8001d88 <HAL_I2C_Mem_Read+0x440>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d007      	beq.n	80019c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2222      	movs	r2, #34	; 0x22
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a5b      	ldr	r2, [pc, #364]	; (8001b70 <HAL_I2C_Mem_Read+0x228>)
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a06:	88f8      	ldrh	r0, [r7, #6]
 8001a08:	893a      	ldrh	r2, [r7, #8]
 8001a0a:	8979      	ldrh	r1, [r7, #10]
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	4603      	mov	r3, r0
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fb80 	bl	800211c <I2C_RequestMemoryRead>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e1b0      	b.n	8001d88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d113      	bne.n	8001a56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	623b      	str	r3, [r7, #32]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e184      	b.n	8001d60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d11b      	bne.n	8001a96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e164      	b.n	8001d60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	e144      	b.n	8001d60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001aec:	e138      	b.n	8001d60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	f200 80f1 	bhi.w	8001cda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d123      	bne.n	8001b48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 fd49 	bl	800259c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e139      	b.n	8001d88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b46:	e10b      	b.n	8001d60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d14e      	bne.n	8001bee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b56:	2200      	movs	r2, #0
 8001b58:	4906      	ldr	r1, [pc, #24]	; (8001b74 <HAL_I2C_Mem_Read+0x22c>)
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fbc6 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e10e      	b.n	8001d88 <HAL_I2C_Mem_Read+0x440>
 8001b6a:	bf00      	nop
 8001b6c:	00100002 	.word	0x00100002
 8001b70:	ffff0000 	.word	0xffff0000
 8001b74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bec:	e0b8      	b.n	8001d60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4966      	ldr	r1, [pc, #408]	; (8001d90 <HAL_I2C_Mem_Read+0x448>)
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 fb77 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0bf      	b.n	8001d88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	2200      	movs	r2, #0
 8001c52:	494f      	ldr	r1, [pc, #316]	; (8001d90 <HAL_I2C_Mem_Read+0x448>)
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 fb49 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e091      	b.n	8001d88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cd8:	e042      	b.n	8001d60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fc5c 	bl	800259c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e04c      	b.n	8001d88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d118      	bne.n	8001d60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f47f aec2 	bne.w	8001aee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d86:	2302      	movs	r3, #2
  }
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	00010004 	.word	0x00010004

08001d94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	460b      	mov	r3, r1
 8001da2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff f8e0 	bl	8000f68 <HAL_GetTick>
 8001da8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	f040 8111 	bne.w	8001fde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2319      	movs	r3, #25
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4988      	ldr	r1, [pc, #544]	; (8001fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fa90 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e104      	b.n	8001fe0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_I2C_IsDeviceReady+0x50>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e0fd      	b.n	8001fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d007      	beq.n	8001e0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2224      	movs	r2, #36	; 0x24
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a70      	ldr	r2, [pc, #448]	; (8001fec <HAL_I2C_IsDeviceReady+0x258>)
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fa4e 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00d      	beq.n	8001e72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e64:	d103      	bne.n	8001e6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0b6      	b.n	8001fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e72:	897b      	ldrh	r3, [r7, #10]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e82:	f7ff f871 	bl	8000f68 <HAL_GetTick>
 8001e86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001eb6:	e025      	b.n	8001f04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eb8:	f7ff f856 	bl	8000f68 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d302      	bcc.n	8001ece <HAL_I2C_IsDeviceReady+0x13a>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	22a0      	movs	r2, #160	; 0xa0
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2ba0      	cmp	r3, #160	; 0xa0
 8001f0e:	d005      	beq.n	8001f1c <HAL_I2C_IsDeviceReady+0x188>
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_I2C_IsDeviceReady+0x188>
 8001f16:	7dbb      	ldrb	r3, [r7, #22]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0cd      	beq.n	8001eb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d129      	bne.n	8001f86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2319      	movs	r3, #25
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4921      	ldr	r1, [pc, #132]	; (8001fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f9c2 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e036      	b.n	8001fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e02c      	b.n	8001fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2319      	movs	r3, #25
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	490f      	ldr	r1, [pc, #60]	; (8001fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f99e 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e012      	b.n	8001fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f4ff af32 	bcc.w	8001e2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
  }
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	00100002 	.word	0x00100002
 8001fec:	ffff0000 	.word	0xffff0000

08001ff0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	817b      	strh	r3, [r7, #10]
 8002002:	460b      	mov	r3, r1
 8002004:	813b      	strh	r3, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	2200      	movs	r2, #0
 8002022:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f960 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002040:	d103      	bne.n	800204a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e05f      	b.n	800210e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800204e:	897b      	ldrh	r3, [r7, #10]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800205c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	492d      	ldr	r1, [pc, #180]	; (8002118 <I2C_RequestMemoryWrite+0x128>)
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f998 	bl	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e04c      	b.n	800210e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208c:	6a39      	ldr	r1, [r7, #32]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fa02 	bl	8002498 <I2C_WaitOnTXEFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d107      	bne.n	80020b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e02b      	b.n	800210e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020bc:	893b      	ldrh	r3, [r7, #8]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	611a      	str	r2, [r3, #16]
 80020c6:	e021      	b.n	800210c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020c8:	893b      	ldrh	r3, [r7, #8]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d8:	6a39      	ldr	r1, [r7, #32]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f9dc 	bl	8002498 <I2C_WaitOnTXEFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00d      	beq.n	8002102 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d107      	bne.n	80020fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e005      	b.n	800210e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002102:	893b      	ldrh	r3, [r7, #8]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	00010002 	.word	0x00010002

0800211c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	4608      	mov	r0, r1
 8002126:	4611      	mov	r1, r2
 8002128:	461a      	mov	r2, r3
 800212a:	4603      	mov	r3, r0
 800212c:	817b      	strh	r3, [r7, #10]
 800212e:	460b      	mov	r3, r1
 8002130:	813b      	strh	r3, [r7, #8]
 8002132:	4613      	mov	r3, r2
 8002134:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002144:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002154:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	2200      	movs	r2, #0
 800215e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f8c2 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00d      	beq.n	800218a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217c:	d103      	bne.n	8002186 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0aa      	b.n	80022e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800218a:	897b      	ldrh	r3, [r7, #10]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002198:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	6a3a      	ldr	r2, [r7, #32]
 800219e:	4952      	ldr	r1, [pc, #328]	; (80022e8 <I2C_RequestMemoryRead+0x1cc>)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f8fa 	bl	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e097      	b.n	80022e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	6a39      	ldr	r1, [r7, #32]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f964 	bl	8002498 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00d      	beq.n	80021f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d107      	bne.n	80021ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e076      	b.n	80022e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021f8:	893b      	ldrh	r3, [r7, #8]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	611a      	str	r2, [r3, #16]
 8002202:	e021      	b.n	8002248 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	b29b      	uxth	r3, r3
 800220a:	b2da      	uxtb	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002214:	6a39      	ldr	r1, [r7, #32]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f93e 	bl	8002498 <I2C_WaitOnTXEFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	2b04      	cmp	r3, #4
 8002228:	d107      	bne.n	800223a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002238:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e050      	b.n	80022e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800223e:	893b      	ldrh	r3, [r7, #8]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	6a39      	ldr	r1, [r7, #32]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f923 	bl	8002498 <I2C_WaitOnTXEFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00d      	beq.n	8002274 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	2b04      	cmp	r3, #4
 800225e:	d107      	bne.n	8002270 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e035      	b.n	80022e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002282:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	2200      	movs	r2, #0
 800228c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f82b 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00d      	beq.n	80022b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022aa:	d103      	bne.n	80022b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e013      	b.n	80022e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022b8:	897b      	ldrh	r3, [r7, #10]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	6a3a      	ldr	r2, [r7, #32]
 80022cc:	4906      	ldr	r1, [pc, #24]	; (80022e8 <I2C_RequestMemoryRead+0x1cc>)
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f863 	bl	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	00010002 	.word	0x00010002

080022ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022fc:	e025      	b.n	800234a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d021      	beq.n	800234a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7fe fe2f 	bl	8000f68 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d116      	bne.n	800234a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e023      	b.n	8002392 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d10d      	bne.n	8002370 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4013      	ands	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf0c      	ite	eq
 8002366:	2301      	moveq	r3, #1
 8002368:	2300      	movne	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	e00c      	b.n	800238a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4013      	ands	r3, r2
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf0c      	ite	eq
 8002382:	2301      	moveq	r3, #1
 8002384:	2300      	movne	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	429a      	cmp	r2, r3
 800238e:	d0b6      	beq.n	80022fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a8:	e051      	b.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b8:	d123      	bne.n	8002402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f043 0204 	orr.w	r2, r3, #4
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e046      	b.n	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d021      	beq.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240a:	f7fe fdad 	bl	8000f68 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d302      	bcc.n	8002420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d116      	bne.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e020      	b.n	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10c      	bne.n	8002472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4013      	ands	r3, r2
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf14      	ite	ne
 800246a:	2301      	movne	r3, #1
 800246c:	2300      	moveq	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	e00b      	b.n	800248a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	43da      	mvns	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4013      	ands	r3, r2
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf14      	ite	ne
 8002484:	2301      	movne	r3, #1
 8002486:	2300      	moveq	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d18d      	bne.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024a4:	e02d      	b.n	8002502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f8ce 	bl	8002648 <I2C_IsAcknowledgeFailed>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e02d      	b.n	8002512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d021      	beq.n	8002502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024be:	f7fe fd53 	bl	8000f68 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d116      	bne.n	8002502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 0220 	orr.w	r2, r3, #32
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e007      	b.n	8002512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d1ca      	bne.n	80024a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002526:	e02d      	b.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f88d 	bl	8002648 <I2C_IsAcknowledgeFailed>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e02d      	b.n	8002594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253e:	d021      	beq.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002540:	f7fe fd12 	bl	8000f68 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	429a      	cmp	r2, r3
 800254e:	d302      	bcc.n	8002556 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f043 0220 	orr.w	r2, r3, #32
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e007      	b.n	8002594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d1ca      	bne.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025a8:	e042      	b.n	8002630 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d119      	bne.n	80025ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0210 	mvn.w	r2, #16
 80025c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e029      	b.n	8002640 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ec:	f7fe fcbc 	bl	8000f68 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d302      	bcc.n	8002602 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e007      	b.n	8002640 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d1b5      	bne.n	80025aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265e:	d11b      	bne.n	8002698 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002668:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e267      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d075      	beq.n	80027b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d00c      	beq.n	80026ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b7e      	ldr	r3, [pc, #504]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05b      	beq.n	80027b0 <HAL_RCC_OscConfig+0x108>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d157      	bne.n	80027b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e242      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x74>
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01d      	b.n	8002758 <HAL_RCC_OscConfig+0xb0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x98>
 8002726:	4b70      	ldr	r3, [pc, #448]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6f      	ldr	r2, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6c      	ldr	r2, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0xb0>
 8002740:	4b69      	ldr	r3, [pc, #420]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a68      	ldr	r2, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe fc02 	bl	8000f68 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7fe fbfe 	bl	8000f68 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e207      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xc0>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe fbee 	bl	8000f68 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f7fe fbea 	bl	8000f68 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1f3      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0xe8>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d11c      	bne.n	8002810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_RCC_OscConfig+0x152>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1c7      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4937      	ldr	r1, [pc, #220]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	e03a      	b.n	8002886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fba3 	bl	8000f68 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002826:	f7fe fb9f 	bl	8000f68 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1a8      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4925      	ldr	r1, [pc, #148]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fb82 	bl	8000f68 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002868:	f7fe fb7e 	bl	8000f68 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e187      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d036      	beq.n	8002900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_RCC_OscConfig+0x248>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe fb62 	bl	8000f68 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a8:	f7fe fb5e 	bl	8000f68 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e167      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80028bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x200>
 80028c6:	e01b      	b.n	8002900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_OscConfig+0x248>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe fb4b 	bl	8000f68 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	e00e      	b.n	80028f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d6:	f7fe fb47 	bl	8000f68 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d907      	bls.n	80028f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e150      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
 80028e8:	40023800 	.word	0x40023800
 80028ec:	42470000 	.word	0x42470000
 80028f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ea      	bne.n	80028d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8097 	beq.w	8002a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b7d      	ldr	r3, [pc, #500]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a7c      	ldr	r2, [pc, #496]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b7a      	ldr	r3, [pc, #488]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b77      	ldr	r3, [pc, #476]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294a:	4b74      	ldr	r3, [pc, #464]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a73      	ldr	r2, [pc, #460]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7fe fb07 	bl	8000f68 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7fe fb03 	bl	8000f68 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e10c      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002970:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x2ea>
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a63      	ldr	r2, [pc, #396]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0x324>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x30c>
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a5b      	ldr	r2, [pc, #364]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0x324>
 80029b4:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a57      	ldr	r2, [pc, #348]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	4b55      	ldr	r3, [pc, #340]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a54      	ldr	r2, [pc, #336]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029c6:	f023 0304 	bic.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fac8 	bl	8000f68 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fac4 	bl	8000f68 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0cb      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ee      	beq.n	80029dc <HAL_RCC_OscConfig+0x334>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fab2 	bl	8000f68 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe faae 	bl	8000f68 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0b5      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	4b3e      	ldr	r3, [pc, #248]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ee      	bne.n	8002a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4a38      	ldr	r2, [pc, #224]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80a1 	beq.w	8002b88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a46:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d05c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d141      	bne.n	8002ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <HAL_RCC_OscConfig+0x478>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fa82 	bl	8000f68 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe fa7e 	bl	8000f68 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e087      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	491b      	ldr	r1, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x478>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fa57 	bl	8000f68 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe fa53 	bl	8000f68 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e05c      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x416>
 8002adc:	e054      	b.n	8002b88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x478>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fa40 	bl	8000f68 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fa3c 	bl	8000f68 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e045      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x444>
 8002b0a:	e03d      	b.n	8002b88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e038      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_RCC_OscConfig+0x4ec>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d028      	beq.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d121      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d11a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d111      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0cc      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d90c      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d044      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d119      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e067      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4934      	ldr	r1, [pc, #208]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7fe f96e 	bl	8000f68 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7fe f96a 	bl	8000f68 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e04f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 020c 	and.w	r2, r3, #12
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1eb      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d20c      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e032      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4916      	ldr	r1, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	490e      	ldr	r1, [pc, #56]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1e:	f000 f821 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	490a      	ldr	r1, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f8ce 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	08003fac 	.word	0x08003fac
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000004 	.word	0x20000004

08002d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d68:	b090      	sub	sp, #64	; 0x40
 8002d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d70:	2300      	movs	r3, #0
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d74:	2300      	movs	r3, #0
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d00d      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	f200 80a1 	bhi.w	8002ed0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x34>
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d96:	e09b      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d9c:	e09b      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d9e:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_RCC_GetSysClockFreq+0x188>)
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002da2:	e098      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da4:	4b4f      	ldr	r3, [pc, #316]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dae:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d028      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	627a      	str	r2, [r7, #36]	; 0x24
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_GetSysClockFreq+0x188>)
 8002dd0:	fb03 f201 	mul.w	r2, r3, r1
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	fb00 f303 	mul.w	r3, r0, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a43      	ldr	r2, [pc, #268]	; (8002eec <HAL_RCC_GetSysClockFreq+0x188>)
 8002dde:	fba0 1202 	umull	r1, r2, r0, r2
 8002de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de4:	460a      	mov	r2, r1
 8002de6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dea:	4413      	add	r3, r2
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	2200      	movs	r2, #0
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	61fa      	str	r2, [r7, #28]
 8002df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dfe:	f7fd fa37 	bl	8000270 <__aeabi_uldivmod>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4613      	mov	r3, r2
 8002e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0a:	e053      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0c:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	2200      	movs	r2, #0
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	617a      	str	r2, [r7, #20]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e1e:	f04f 0b00 	mov.w	fp, #0
 8002e22:	4652      	mov	r2, sl
 8002e24:	465b      	mov	r3, fp
 8002e26:	f04f 0000 	mov.w	r0, #0
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	0159      	lsls	r1, r3, #5
 8002e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e34:	0150      	lsls	r0, r2, #5
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e3e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e56:	ebb2 0408 	subs.w	r4, r2, r8
 8002e5a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	00eb      	lsls	r3, r5, #3
 8002e68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e6c:	00e2      	lsls	r2, r4, #3
 8002e6e:	4614      	mov	r4, r2
 8002e70:	461d      	mov	r5, r3
 8002e72:	eb14 030a 	adds.w	r3, r4, sl
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	eb45 030b 	adc.w	r3, r5, fp
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	028b      	lsls	r3, r1, #10
 8002e8e:	4621      	mov	r1, r4
 8002e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e94:	4621      	mov	r1, r4
 8002e96:	028a      	lsls	r2, r1, #10
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	60fa      	str	r2, [r7, #12]
 8002ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ea8:	f7fd f9e2 	bl	8000270 <__aeabi_uldivmod>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ece:	e002      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ed2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3740      	adds	r7, #64	; 0x40
 8002edc:	46bd      	mov	sp, r7
 8002ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	017d7840 	.word	0x017d7840

08002ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000000 	.word	0x20000000

08002f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f0c:	f7ff fff0 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	0a9b      	lsrs	r3, r3, #10
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	08003fbc 	.word	0x08003fbc

08002f30 <__errno>:
 8002f30:	4b01      	ldr	r3, [pc, #4]	; (8002f38 <__errno+0x8>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	2000000c 	.word	0x2000000c

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	4d0d      	ldr	r5, [pc, #52]	; (8002f74 <__libc_init_array+0x38>)
 8002f40:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <__libc_init_array+0x3c>)
 8002f42:	1b64      	subs	r4, r4, r5
 8002f44:	10a4      	asrs	r4, r4, #2
 8002f46:	2600      	movs	r6, #0
 8002f48:	42a6      	cmp	r6, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	4d0b      	ldr	r5, [pc, #44]	; (8002f7c <__libc_init_array+0x40>)
 8002f4e:	4c0c      	ldr	r4, [pc, #48]	; (8002f80 <__libc_init_array+0x44>)
 8002f50:	f001 f81a 	bl	8003f88 <_init>
 8002f54:	1b64      	subs	r4, r4, r5
 8002f56:	10a4      	asrs	r4, r4, #2
 8002f58:	2600      	movs	r6, #0
 8002f5a:	42a6      	cmp	r6, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f64:	4798      	blx	r3
 8002f66:	3601      	adds	r6, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6e:	4798      	blx	r3
 8002f70:	3601      	adds	r6, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	08004064 	.word	0x08004064
 8002f78:	08004064 	.word	0x08004064
 8002f7c:	08004064 	.word	0x08004064
 8002f80:	08004068 	.word	0x08004068

08002f84 <memcpy>:
 8002f84:	440a      	add	r2, r1
 8002f86:	4291      	cmp	r1, r2
 8002f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f8c:	d100      	bne.n	8002f90 <memcpy+0xc>
 8002f8e:	4770      	bx	lr
 8002f90:	b510      	push	{r4, lr}
 8002f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f9a:	4291      	cmp	r1, r2
 8002f9c:	d1f9      	bne.n	8002f92 <memcpy+0xe>
 8002f9e:	bd10      	pop	{r4, pc}

08002fa0 <memset>:
 8002fa0:	4402      	add	r2, r0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d100      	bne.n	8002faa <memset+0xa>
 8002fa8:	4770      	bx	lr
 8002faa:	f803 1b01 	strb.w	r1, [r3], #1
 8002fae:	e7f9      	b.n	8002fa4 <memset+0x4>

08002fb0 <iprintf>:
 8002fb0:	b40f      	push	{r0, r1, r2, r3}
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <iprintf+0x2c>)
 8002fb4:	b513      	push	{r0, r1, r4, lr}
 8002fb6:	681c      	ldr	r4, [r3, #0]
 8002fb8:	b124      	cbz	r4, 8002fc4 <iprintf+0x14>
 8002fba:	69a3      	ldr	r3, [r4, #24]
 8002fbc:	b913      	cbnz	r3, 8002fc4 <iprintf+0x14>
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f000 f87c 	bl	80030bc <__sinit>
 8002fc4:	ab05      	add	r3, sp, #20
 8002fc6:	9a04      	ldr	r2, [sp, #16]
 8002fc8:	68a1      	ldr	r1, [r4, #8]
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f000 f9d3 	bl	8003378 <_vfiprintf_r>
 8002fd2:	b002      	add	sp, #8
 8002fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd8:	b004      	add	sp, #16
 8002fda:	4770      	bx	lr
 8002fdc:	2000000c 	.word	0x2000000c

08002fe0 <putchar>:
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <putchar+0x28>)
 8002fe2:	b513      	push	{r0, r1, r4, lr}
 8002fe4:	681c      	ldr	r4, [r3, #0]
 8002fe6:	4601      	mov	r1, r0
 8002fe8:	b134      	cbz	r4, 8002ff8 <putchar+0x18>
 8002fea:	69a3      	ldr	r3, [r4, #24]
 8002fec:	b923      	cbnz	r3, 8002ff8 <putchar+0x18>
 8002fee:	9001      	str	r0, [sp, #4]
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f000 f863 	bl	80030bc <__sinit>
 8002ff6:	9901      	ldr	r1, [sp, #4]
 8002ff8:	68a2      	ldr	r2, [r4, #8]
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	b002      	add	sp, #8
 8002ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003002:	f000 bc7d 	b.w	8003900 <_putc_r>
 8003006:	bf00      	nop
 8003008:	2000000c 	.word	0x2000000c

0800300c <std>:
 800300c:	2300      	movs	r3, #0
 800300e:	b510      	push	{r4, lr}
 8003010:	4604      	mov	r4, r0
 8003012:	e9c0 3300 	strd	r3, r3, [r0]
 8003016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800301a:	6083      	str	r3, [r0, #8]
 800301c:	8181      	strh	r1, [r0, #12]
 800301e:	6643      	str	r3, [r0, #100]	; 0x64
 8003020:	81c2      	strh	r2, [r0, #14]
 8003022:	6183      	str	r3, [r0, #24]
 8003024:	4619      	mov	r1, r3
 8003026:	2208      	movs	r2, #8
 8003028:	305c      	adds	r0, #92	; 0x5c
 800302a:	f7ff ffb9 	bl	8002fa0 <memset>
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <std+0x38>)
 8003030:	6263      	str	r3, [r4, #36]	; 0x24
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <std+0x3c>)
 8003034:	62a3      	str	r3, [r4, #40]	; 0x28
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <std+0x40>)
 8003038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800303a:	4b05      	ldr	r3, [pc, #20]	; (8003050 <std+0x44>)
 800303c:	6224      	str	r4, [r4, #32]
 800303e:	6323      	str	r3, [r4, #48]	; 0x30
 8003040:	bd10      	pop	{r4, pc}
 8003042:	bf00      	nop
 8003044:	080039b1 	.word	0x080039b1
 8003048:	080039d3 	.word	0x080039d3
 800304c:	08003a0b 	.word	0x08003a0b
 8003050:	08003a2f 	.word	0x08003a2f

08003054 <_cleanup_r>:
 8003054:	4901      	ldr	r1, [pc, #4]	; (800305c <_cleanup_r+0x8>)
 8003056:	f000 b8af 	b.w	80031b8 <_fwalk_reent>
 800305a:	bf00      	nop
 800305c:	08003d09 	.word	0x08003d09

08003060 <__sfmoreglue>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	2268      	movs	r2, #104	; 0x68
 8003064:	1e4d      	subs	r5, r1, #1
 8003066:	4355      	muls	r5, r2
 8003068:	460e      	mov	r6, r1
 800306a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800306e:	f000 f8e5 	bl	800323c <_malloc_r>
 8003072:	4604      	mov	r4, r0
 8003074:	b140      	cbz	r0, 8003088 <__sfmoreglue+0x28>
 8003076:	2100      	movs	r1, #0
 8003078:	e9c0 1600 	strd	r1, r6, [r0]
 800307c:	300c      	adds	r0, #12
 800307e:	60a0      	str	r0, [r4, #8]
 8003080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003084:	f7ff ff8c 	bl	8002fa0 <memset>
 8003088:	4620      	mov	r0, r4
 800308a:	bd70      	pop	{r4, r5, r6, pc}

0800308c <__sfp_lock_acquire>:
 800308c:	4801      	ldr	r0, [pc, #4]	; (8003094 <__sfp_lock_acquire+0x8>)
 800308e:	f000 b8b3 	b.w	80031f8 <__retarget_lock_acquire_recursive>
 8003092:	bf00      	nop
 8003094:	200000f1 	.word	0x200000f1

08003098 <__sfp_lock_release>:
 8003098:	4801      	ldr	r0, [pc, #4]	; (80030a0 <__sfp_lock_release+0x8>)
 800309a:	f000 b8ae 	b.w	80031fa <__retarget_lock_release_recursive>
 800309e:	bf00      	nop
 80030a0:	200000f1 	.word	0x200000f1

080030a4 <__sinit_lock_acquire>:
 80030a4:	4801      	ldr	r0, [pc, #4]	; (80030ac <__sinit_lock_acquire+0x8>)
 80030a6:	f000 b8a7 	b.w	80031f8 <__retarget_lock_acquire_recursive>
 80030aa:	bf00      	nop
 80030ac:	200000f2 	.word	0x200000f2

080030b0 <__sinit_lock_release>:
 80030b0:	4801      	ldr	r0, [pc, #4]	; (80030b8 <__sinit_lock_release+0x8>)
 80030b2:	f000 b8a2 	b.w	80031fa <__retarget_lock_release_recursive>
 80030b6:	bf00      	nop
 80030b8:	200000f2 	.word	0x200000f2

080030bc <__sinit>:
 80030bc:	b510      	push	{r4, lr}
 80030be:	4604      	mov	r4, r0
 80030c0:	f7ff fff0 	bl	80030a4 <__sinit_lock_acquire>
 80030c4:	69a3      	ldr	r3, [r4, #24]
 80030c6:	b11b      	cbz	r3, 80030d0 <__sinit+0x14>
 80030c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030cc:	f7ff bff0 	b.w	80030b0 <__sinit_lock_release>
 80030d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80030d4:	6523      	str	r3, [r4, #80]	; 0x50
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <__sinit+0x68>)
 80030d8:	4a13      	ldr	r2, [pc, #76]	; (8003128 <__sinit+0x6c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80030de:	42a3      	cmp	r3, r4
 80030e0:	bf04      	itt	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	61a3      	streq	r3, [r4, #24]
 80030e6:	4620      	mov	r0, r4
 80030e8:	f000 f820 	bl	800312c <__sfp>
 80030ec:	6060      	str	r0, [r4, #4]
 80030ee:	4620      	mov	r0, r4
 80030f0:	f000 f81c 	bl	800312c <__sfp>
 80030f4:	60a0      	str	r0, [r4, #8]
 80030f6:	4620      	mov	r0, r4
 80030f8:	f000 f818 	bl	800312c <__sfp>
 80030fc:	2200      	movs	r2, #0
 80030fe:	60e0      	str	r0, [r4, #12]
 8003100:	2104      	movs	r1, #4
 8003102:	6860      	ldr	r0, [r4, #4]
 8003104:	f7ff ff82 	bl	800300c <std>
 8003108:	68a0      	ldr	r0, [r4, #8]
 800310a:	2201      	movs	r2, #1
 800310c:	2109      	movs	r1, #9
 800310e:	f7ff ff7d 	bl	800300c <std>
 8003112:	68e0      	ldr	r0, [r4, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	2112      	movs	r1, #18
 8003118:	f7ff ff78 	bl	800300c <std>
 800311c:	2301      	movs	r3, #1
 800311e:	61a3      	str	r3, [r4, #24]
 8003120:	e7d2      	b.n	80030c8 <__sinit+0xc>
 8003122:	bf00      	nop
 8003124:	08003fc4 	.word	0x08003fc4
 8003128:	08003055 	.word	0x08003055

0800312c <__sfp>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	4607      	mov	r7, r0
 8003130:	f7ff ffac 	bl	800308c <__sfp_lock_acquire>
 8003134:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <__sfp+0x84>)
 8003136:	681e      	ldr	r6, [r3, #0]
 8003138:	69b3      	ldr	r3, [r6, #24]
 800313a:	b913      	cbnz	r3, 8003142 <__sfp+0x16>
 800313c:	4630      	mov	r0, r6
 800313e:	f7ff ffbd 	bl	80030bc <__sinit>
 8003142:	3648      	adds	r6, #72	; 0x48
 8003144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003148:	3b01      	subs	r3, #1
 800314a:	d503      	bpl.n	8003154 <__sfp+0x28>
 800314c:	6833      	ldr	r3, [r6, #0]
 800314e:	b30b      	cbz	r3, 8003194 <__sfp+0x68>
 8003150:	6836      	ldr	r6, [r6, #0]
 8003152:	e7f7      	b.n	8003144 <__sfp+0x18>
 8003154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003158:	b9d5      	cbnz	r5, 8003190 <__sfp+0x64>
 800315a:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <__sfp+0x88>)
 800315c:	60e3      	str	r3, [r4, #12]
 800315e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003162:	6665      	str	r5, [r4, #100]	; 0x64
 8003164:	f000 f847 	bl	80031f6 <__retarget_lock_init_recursive>
 8003168:	f7ff ff96 	bl	8003098 <__sfp_lock_release>
 800316c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003174:	6025      	str	r5, [r4, #0]
 8003176:	61a5      	str	r5, [r4, #24]
 8003178:	2208      	movs	r2, #8
 800317a:	4629      	mov	r1, r5
 800317c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003180:	f7ff ff0e 	bl	8002fa0 <memset>
 8003184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800318c:	4620      	mov	r0, r4
 800318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003190:	3468      	adds	r4, #104	; 0x68
 8003192:	e7d9      	b.n	8003148 <__sfp+0x1c>
 8003194:	2104      	movs	r1, #4
 8003196:	4638      	mov	r0, r7
 8003198:	f7ff ff62 	bl	8003060 <__sfmoreglue>
 800319c:	4604      	mov	r4, r0
 800319e:	6030      	str	r0, [r6, #0]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d1d5      	bne.n	8003150 <__sfp+0x24>
 80031a4:	f7ff ff78 	bl	8003098 <__sfp_lock_release>
 80031a8:	230c      	movs	r3, #12
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	e7ee      	b.n	800318c <__sfp+0x60>
 80031ae:	bf00      	nop
 80031b0:	08003fc4 	.word	0x08003fc4
 80031b4:	ffff0001 	.word	0xffff0001

080031b8 <_fwalk_reent>:
 80031b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031bc:	4606      	mov	r6, r0
 80031be:	4688      	mov	r8, r1
 80031c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031c4:	2700      	movs	r7, #0
 80031c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031ca:	f1b9 0901 	subs.w	r9, r9, #1
 80031ce:	d505      	bpl.n	80031dc <_fwalk_reent+0x24>
 80031d0:	6824      	ldr	r4, [r4, #0]
 80031d2:	2c00      	cmp	r4, #0
 80031d4:	d1f7      	bne.n	80031c6 <_fwalk_reent+0xe>
 80031d6:	4638      	mov	r0, r7
 80031d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031dc:	89ab      	ldrh	r3, [r5, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d907      	bls.n	80031f2 <_fwalk_reent+0x3a>
 80031e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031e6:	3301      	adds	r3, #1
 80031e8:	d003      	beq.n	80031f2 <_fwalk_reent+0x3a>
 80031ea:	4629      	mov	r1, r5
 80031ec:	4630      	mov	r0, r6
 80031ee:	47c0      	blx	r8
 80031f0:	4307      	orrs	r7, r0
 80031f2:	3568      	adds	r5, #104	; 0x68
 80031f4:	e7e9      	b.n	80031ca <_fwalk_reent+0x12>

080031f6 <__retarget_lock_init_recursive>:
 80031f6:	4770      	bx	lr

080031f8 <__retarget_lock_acquire_recursive>:
 80031f8:	4770      	bx	lr

080031fa <__retarget_lock_release_recursive>:
 80031fa:	4770      	bx	lr

080031fc <sbrk_aligned>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	4e0e      	ldr	r6, [pc, #56]	; (8003238 <sbrk_aligned+0x3c>)
 8003200:	460c      	mov	r4, r1
 8003202:	6831      	ldr	r1, [r6, #0]
 8003204:	4605      	mov	r5, r0
 8003206:	b911      	cbnz	r1, 800320e <sbrk_aligned+0x12>
 8003208:	f000 fbc2 	bl	8003990 <_sbrk_r>
 800320c:	6030      	str	r0, [r6, #0]
 800320e:	4621      	mov	r1, r4
 8003210:	4628      	mov	r0, r5
 8003212:	f000 fbbd 	bl	8003990 <_sbrk_r>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	d00a      	beq.n	8003230 <sbrk_aligned+0x34>
 800321a:	1cc4      	adds	r4, r0, #3
 800321c:	f024 0403 	bic.w	r4, r4, #3
 8003220:	42a0      	cmp	r0, r4
 8003222:	d007      	beq.n	8003234 <sbrk_aligned+0x38>
 8003224:	1a21      	subs	r1, r4, r0
 8003226:	4628      	mov	r0, r5
 8003228:	f000 fbb2 	bl	8003990 <_sbrk_r>
 800322c:	3001      	adds	r0, #1
 800322e:	d101      	bne.n	8003234 <sbrk_aligned+0x38>
 8003230:	f04f 34ff 	mov.w	r4, #4294967295
 8003234:	4620      	mov	r0, r4
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	200000f8 	.word	0x200000f8

0800323c <_malloc_r>:
 800323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003240:	1ccd      	adds	r5, r1, #3
 8003242:	f025 0503 	bic.w	r5, r5, #3
 8003246:	3508      	adds	r5, #8
 8003248:	2d0c      	cmp	r5, #12
 800324a:	bf38      	it	cc
 800324c:	250c      	movcc	r5, #12
 800324e:	2d00      	cmp	r5, #0
 8003250:	4607      	mov	r7, r0
 8003252:	db01      	blt.n	8003258 <_malloc_r+0x1c>
 8003254:	42a9      	cmp	r1, r5
 8003256:	d905      	bls.n	8003264 <_malloc_r+0x28>
 8003258:	230c      	movs	r3, #12
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	2600      	movs	r6, #0
 800325e:	4630      	mov	r0, r6
 8003260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003264:	4e2e      	ldr	r6, [pc, #184]	; (8003320 <_malloc_r+0xe4>)
 8003266:	f000 fe03 	bl	8003e70 <__malloc_lock>
 800326a:	6833      	ldr	r3, [r6, #0]
 800326c:	461c      	mov	r4, r3
 800326e:	bb34      	cbnz	r4, 80032be <_malloc_r+0x82>
 8003270:	4629      	mov	r1, r5
 8003272:	4638      	mov	r0, r7
 8003274:	f7ff ffc2 	bl	80031fc <sbrk_aligned>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	4604      	mov	r4, r0
 800327c:	d14d      	bne.n	800331a <_malloc_r+0xde>
 800327e:	6834      	ldr	r4, [r6, #0]
 8003280:	4626      	mov	r6, r4
 8003282:	2e00      	cmp	r6, #0
 8003284:	d140      	bne.n	8003308 <_malloc_r+0xcc>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	4631      	mov	r1, r6
 800328a:	4638      	mov	r0, r7
 800328c:	eb04 0803 	add.w	r8, r4, r3
 8003290:	f000 fb7e 	bl	8003990 <_sbrk_r>
 8003294:	4580      	cmp	r8, r0
 8003296:	d13a      	bne.n	800330e <_malloc_r+0xd2>
 8003298:	6821      	ldr	r1, [r4, #0]
 800329a:	3503      	adds	r5, #3
 800329c:	1a6d      	subs	r5, r5, r1
 800329e:	f025 0503 	bic.w	r5, r5, #3
 80032a2:	3508      	adds	r5, #8
 80032a4:	2d0c      	cmp	r5, #12
 80032a6:	bf38      	it	cc
 80032a8:	250c      	movcc	r5, #12
 80032aa:	4629      	mov	r1, r5
 80032ac:	4638      	mov	r0, r7
 80032ae:	f7ff ffa5 	bl	80031fc <sbrk_aligned>
 80032b2:	3001      	adds	r0, #1
 80032b4:	d02b      	beq.n	800330e <_malloc_r+0xd2>
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	442b      	add	r3, r5
 80032ba:	6023      	str	r3, [r4, #0]
 80032bc:	e00e      	b.n	80032dc <_malloc_r+0xa0>
 80032be:	6822      	ldr	r2, [r4, #0]
 80032c0:	1b52      	subs	r2, r2, r5
 80032c2:	d41e      	bmi.n	8003302 <_malloc_r+0xc6>
 80032c4:	2a0b      	cmp	r2, #11
 80032c6:	d916      	bls.n	80032f6 <_malloc_r+0xba>
 80032c8:	1961      	adds	r1, r4, r5
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	6025      	str	r5, [r4, #0]
 80032ce:	bf18      	it	ne
 80032d0:	6059      	strne	r1, [r3, #4]
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	bf08      	it	eq
 80032d6:	6031      	streq	r1, [r6, #0]
 80032d8:	5162      	str	r2, [r4, r5]
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	4638      	mov	r0, r7
 80032de:	f104 060b 	add.w	r6, r4, #11
 80032e2:	f000 fdcb 	bl	8003e7c <__malloc_unlock>
 80032e6:	f026 0607 	bic.w	r6, r6, #7
 80032ea:	1d23      	adds	r3, r4, #4
 80032ec:	1af2      	subs	r2, r6, r3
 80032ee:	d0b6      	beq.n	800325e <_malloc_r+0x22>
 80032f0:	1b9b      	subs	r3, r3, r6
 80032f2:	50a3      	str	r3, [r4, r2]
 80032f4:	e7b3      	b.n	800325e <_malloc_r+0x22>
 80032f6:	6862      	ldr	r2, [r4, #4]
 80032f8:	42a3      	cmp	r3, r4
 80032fa:	bf0c      	ite	eq
 80032fc:	6032      	streq	r2, [r6, #0]
 80032fe:	605a      	strne	r2, [r3, #4]
 8003300:	e7ec      	b.n	80032dc <_malloc_r+0xa0>
 8003302:	4623      	mov	r3, r4
 8003304:	6864      	ldr	r4, [r4, #4]
 8003306:	e7b2      	b.n	800326e <_malloc_r+0x32>
 8003308:	4634      	mov	r4, r6
 800330a:	6876      	ldr	r6, [r6, #4]
 800330c:	e7b9      	b.n	8003282 <_malloc_r+0x46>
 800330e:	230c      	movs	r3, #12
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4638      	mov	r0, r7
 8003314:	f000 fdb2 	bl	8003e7c <__malloc_unlock>
 8003318:	e7a1      	b.n	800325e <_malloc_r+0x22>
 800331a:	6025      	str	r5, [r4, #0]
 800331c:	e7de      	b.n	80032dc <_malloc_r+0xa0>
 800331e:	bf00      	nop
 8003320:	200000f4 	.word	0x200000f4

08003324 <__sfputc_r>:
 8003324:	6893      	ldr	r3, [r2, #8]
 8003326:	3b01      	subs	r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	b410      	push	{r4}
 800332c:	6093      	str	r3, [r2, #8]
 800332e:	da08      	bge.n	8003342 <__sfputc_r+0x1e>
 8003330:	6994      	ldr	r4, [r2, #24]
 8003332:	42a3      	cmp	r3, r4
 8003334:	db01      	blt.n	800333a <__sfputc_r+0x16>
 8003336:	290a      	cmp	r1, #10
 8003338:	d103      	bne.n	8003342 <__sfputc_r+0x1e>
 800333a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800333e:	f000 bb7b 	b.w	8003a38 <__swbuf_r>
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	1c58      	adds	r0, r3, #1
 8003346:	6010      	str	r0, [r2, #0]
 8003348:	7019      	strb	r1, [r3, #0]
 800334a:	4608      	mov	r0, r1
 800334c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003350:	4770      	bx	lr

08003352 <__sfputs_r>:
 8003352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003354:	4606      	mov	r6, r0
 8003356:	460f      	mov	r7, r1
 8003358:	4614      	mov	r4, r2
 800335a:	18d5      	adds	r5, r2, r3
 800335c:	42ac      	cmp	r4, r5
 800335e:	d101      	bne.n	8003364 <__sfputs_r+0x12>
 8003360:	2000      	movs	r0, #0
 8003362:	e007      	b.n	8003374 <__sfputs_r+0x22>
 8003364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003368:	463a      	mov	r2, r7
 800336a:	4630      	mov	r0, r6
 800336c:	f7ff ffda 	bl	8003324 <__sfputc_r>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d1f3      	bne.n	800335c <__sfputs_r+0xa>
 8003374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003378 <_vfiprintf_r>:
 8003378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800337c:	460d      	mov	r5, r1
 800337e:	b09d      	sub	sp, #116	; 0x74
 8003380:	4614      	mov	r4, r2
 8003382:	4698      	mov	r8, r3
 8003384:	4606      	mov	r6, r0
 8003386:	b118      	cbz	r0, 8003390 <_vfiprintf_r+0x18>
 8003388:	6983      	ldr	r3, [r0, #24]
 800338a:	b90b      	cbnz	r3, 8003390 <_vfiprintf_r+0x18>
 800338c:	f7ff fe96 	bl	80030bc <__sinit>
 8003390:	4b89      	ldr	r3, [pc, #548]	; (80035b8 <_vfiprintf_r+0x240>)
 8003392:	429d      	cmp	r5, r3
 8003394:	d11b      	bne.n	80033ce <_vfiprintf_r+0x56>
 8003396:	6875      	ldr	r5, [r6, #4]
 8003398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800339a:	07d9      	lsls	r1, r3, #31
 800339c:	d405      	bmi.n	80033aa <_vfiprintf_r+0x32>
 800339e:	89ab      	ldrh	r3, [r5, #12]
 80033a0:	059a      	lsls	r2, r3, #22
 80033a2:	d402      	bmi.n	80033aa <_vfiprintf_r+0x32>
 80033a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033a6:	f7ff ff27 	bl	80031f8 <__retarget_lock_acquire_recursive>
 80033aa:	89ab      	ldrh	r3, [r5, #12]
 80033ac:	071b      	lsls	r3, r3, #28
 80033ae:	d501      	bpl.n	80033b4 <_vfiprintf_r+0x3c>
 80033b0:	692b      	ldr	r3, [r5, #16]
 80033b2:	b9eb      	cbnz	r3, 80033f0 <_vfiprintf_r+0x78>
 80033b4:	4629      	mov	r1, r5
 80033b6:	4630      	mov	r0, r6
 80033b8:	f000 fba2 	bl	8003b00 <__swsetup_r>
 80033bc:	b1c0      	cbz	r0, 80033f0 <_vfiprintf_r+0x78>
 80033be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033c0:	07dc      	lsls	r4, r3, #31
 80033c2:	d50e      	bpl.n	80033e2 <_vfiprintf_r+0x6a>
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	b01d      	add	sp, #116	; 0x74
 80033ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ce:	4b7b      	ldr	r3, [pc, #492]	; (80035bc <_vfiprintf_r+0x244>)
 80033d0:	429d      	cmp	r5, r3
 80033d2:	d101      	bne.n	80033d8 <_vfiprintf_r+0x60>
 80033d4:	68b5      	ldr	r5, [r6, #8]
 80033d6:	e7df      	b.n	8003398 <_vfiprintf_r+0x20>
 80033d8:	4b79      	ldr	r3, [pc, #484]	; (80035c0 <_vfiprintf_r+0x248>)
 80033da:	429d      	cmp	r5, r3
 80033dc:	bf08      	it	eq
 80033de:	68f5      	ldreq	r5, [r6, #12]
 80033e0:	e7da      	b.n	8003398 <_vfiprintf_r+0x20>
 80033e2:	89ab      	ldrh	r3, [r5, #12]
 80033e4:	0598      	lsls	r0, r3, #22
 80033e6:	d4ed      	bmi.n	80033c4 <_vfiprintf_r+0x4c>
 80033e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033ea:	f7ff ff06 	bl	80031fa <__retarget_lock_release_recursive>
 80033ee:	e7e9      	b.n	80033c4 <_vfiprintf_r+0x4c>
 80033f0:	2300      	movs	r3, #0
 80033f2:	9309      	str	r3, [sp, #36]	; 0x24
 80033f4:	2320      	movs	r3, #32
 80033f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80033fe:	2330      	movs	r3, #48	; 0x30
 8003400:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80035c4 <_vfiprintf_r+0x24c>
 8003404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003408:	f04f 0901 	mov.w	r9, #1
 800340c:	4623      	mov	r3, r4
 800340e:	469a      	mov	sl, r3
 8003410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003414:	b10a      	cbz	r2, 800341a <_vfiprintf_r+0xa2>
 8003416:	2a25      	cmp	r2, #37	; 0x25
 8003418:	d1f9      	bne.n	800340e <_vfiprintf_r+0x96>
 800341a:	ebba 0b04 	subs.w	fp, sl, r4
 800341e:	d00b      	beq.n	8003438 <_vfiprintf_r+0xc0>
 8003420:	465b      	mov	r3, fp
 8003422:	4622      	mov	r2, r4
 8003424:	4629      	mov	r1, r5
 8003426:	4630      	mov	r0, r6
 8003428:	f7ff ff93 	bl	8003352 <__sfputs_r>
 800342c:	3001      	adds	r0, #1
 800342e:	f000 80aa 	beq.w	8003586 <_vfiprintf_r+0x20e>
 8003432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003434:	445a      	add	r2, fp
 8003436:	9209      	str	r2, [sp, #36]	; 0x24
 8003438:	f89a 3000 	ldrb.w	r3, [sl]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a2 	beq.w	8003586 <_vfiprintf_r+0x20e>
 8003442:	2300      	movs	r3, #0
 8003444:	f04f 32ff 	mov.w	r2, #4294967295
 8003448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800344c:	f10a 0a01 	add.w	sl, sl, #1
 8003450:	9304      	str	r3, [sp, #16]
 8003452:	9307      	str	r3, [sp, #28]
 8003454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003458:	931a      	str	r3, [sp, #104]	; 0x68
 800345a:	4654      	mov	r4, sl
 800345c:	2205      	movs	r2, #5
 800345e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003462:	4858      	ldr	r0, [pc, #352]	; (80035c4 <_vfiprintf_r+0x24c>)
 8003464:	f7fc feb4 	bl	80001d0 <memchr>
 8003468:	9a04      	ldr	r2, [sp, #16]
 800346a:	b9d8      	cbnz	r0, 80034a4 <_vfiprintf_r+0x12c>
 800346c:	06d1      	lsls	r1, r2, #27
 800346e:	bf44      	itt	mi
 8003470:	2320      	movmi	r3, #32
 8003472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003476:	0713      	lsls	r3, r2, #28
 8003478:	bf44      	itt	mi
 800347a:	232b      	movmi	r3, #43	; 0x2b
 800347c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003480:	f89a 3000 	ldrb.w	r3, [sl]
 8003484:	2b2a      	cmp	r3, #42	; 0x2a
 8003486:	d015      	beq.n	80034b4 <_vfiprintf_r+0x13c>
 8003488:	9a07      	ldr	r2, [sp, #28]
 800348a:	4654      	mov	r4, sl
 800348c:	2000      	movs	r0, #0
 800348e:	f04f 0c0a 	mov.w	ip, #10
 8003492:	4621      	mov	r1, r4
 8003494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003498:	3b30      	subs	r3, #48	; 0x30
 800349a:	2b09      	cmp	r3, #9
 800349c:	d94e      	bls.n	800353c <_vfiprintf_r+0x1c4>
 800349e:	b1b0      	cbz	r0, 80034ce <_vfiprintf_r+0x156>
 80034a0:	9207      	str	r2, [sp, #28]
 80034a2:	e014      	b.n	80034ce <_vfiprintf_r+0x156>
 80034a4:	eba0 0308 	sub.w	r3, r0, r8
 80034a8:	fa09 f303 	lsl.w	r3, r9, r3
 80034ac:	4313      	orrs	r3, r2
 80034ae:	9304      	str	r3, [sp, #16]
 80034b0:	46a2      	mov	sl, r4
 80034b2:	e7d2      	b.n	800345a <_vfiprintf_r+0xe2>
 80034b4:	9b03      	ldr	r3, [sp, #12]
 80034b6:	1d19      	adds	r1, r3, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	9103      	str	r1, [sp, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bfbb      	ittet	lt
 80034c0:	425b      	neglt	r3, r3
 80034c2:	f042 0202 	orrlt.w	r2, r2, #2
 80034c6:	9307      	strge	r3, [sp, #28]
 80034c8:	9307      	strlt	r3, [sp, #28]
 80034ca:	bfb8      	it	lt
 80034cc:	9204      	strlt	r2, [sp, #16]
 80034ce:	7823      	ldrb	r3, [r4, #0]
 80034d0:	2b2e      	cmp	r3, #46	; 0x2e
 80034d2:	d10c      	bne.n	80034ee <_vfiprintf_r+0x176>
 80034d4:	7863      	ldrb	r3, [r4, #1]
 80034d6:	2b2a      	cmp	r3, #42	; 0x2a
 80034d8:	d135      	bne.n	8003546 <_vfiprintf_r+0x1ce>
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	1d1a      	adds	r2, r3, #4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	9203      	str	r2, [sp, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bfb8      	it	lt
 80034e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80034ea:	3402      	adds	r4, #2
 80034ec:	9305      	str	r3, [sp, #20]
 80034ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80035d4 <_vfiprintf_r+0x25c>
 80034f2:	7821      	ldrb	r1, [r4, #0]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4650      	mov	r0, sl
 80034f8:	f7fc fe6a 	bl	80001d0 <memchr>
 80034fc:	b140      	cbz	r0, 8003510 <_vfiprintf_r+0x198>
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	eba0 000a 	sub.w	r0, r0, sl
 8003504:	fa03 f000 	lsl.w	r0, r3, r0
 8003508:	9b04      	ldr	r3, [sp, #16]
 800350a:	4303      	orrs	r3, r0
 800350c:	3401      	adds	r4, #1
 800350e:	9304      	str	r3, [sp, #16]
 8003510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003514:	482c      	ldr	r0, [pc, #176]	; (80035c8 <_vfiprintf_r+0x250>)
 8003516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800351a:	2206      	movs	r2, #6
 800351c:	f7fc fe58 	bl	80001d0 <memchr>
 8003520:	2800      	cmp	r0, #0
 8003522:	d03f      	beq.n	80035a4 <_vfiprintf_r+0x22c>
 8003524:	4b29      	ldr	r3, [pc, #164]	; (80035cc <_vfiprintf_r+0x254>)
 8003526:	bb1b      	cbnz	r3, 8003570 <_vfiprintf_r+0x1f8>
 8003528:	9b03      	ldr	r3, [sp, #12]
 800352a:	3307      	adds	r3, #7
 800352c:	f023 0307 	bic.w	r3, r3, #7
 8003530:	3308      	adds	r3, #8
 8003532:	9303      	str	r3, [sp, #12]
 8003534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003536:	443b      	add	r3, r7
 8003538:	9309      	str	r3, [sp, #36]	; 0x24
 800353a:	e767      	b.n	800340c <_vfiprintf_r+0x94>
 800353c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003540:	460c      	mov	r4, r1
 8003542:	2001      	movs	r0, #1
 8003544:	e7a5      	b.n	8003492 <_vfiprintf_r+0x11a>
 8003546:	2300      	movs	r3, #0
 8003548:	3401      	adds	r4, #1
 800354a:	9305      	str	r3, [sp, #20]
 800354c:	4619      	mov	r1, r3
 800354e:	f04f 0c0a 	mov.w	ip, #10
 8003552:	4620      	mov	r0, r4
 8003554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003558:	3a30      	subs	r2, #48	; 0x30
 800355a:	2a09      	cmp	r2, #9
 800355c:	d903      	bls.n	8003566 <_vfiprintf_r+0x1ee>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0c5      	beq.n	80034ee <_vfiprintf_r+0x176>
 8003562:	9105      	str	r1, [sp, #20]
 8003564:	e7c3      	b.n	80034ee <_vfiprintf_r+0x176>
 8003566:	fb0c 2101 	mla	r1, ip, r1, r2
 800356a:	4604      	mov	r4, r0
 800356c:	2301      	movs	r3, #1
 800356e:	e7f0      	b.n	8003552 <_vfiprintf_r+0x1da>
 8003570:	ab03      	add	r3, sp, #12
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	462a      	mov	r2, r5
 8003576:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <_vfiprintf_r+0x258>)
 8003578:	a904      	add	r1, sp, #16
 800357a:	4630      	mov	r0, r6
 800357c:	f3af 8000 	nop.w
 8003580:	4607      	mov	r7, r0
 8003582:	1c78      	adds	r0, r7, #1
 8003584:	d1d6      	bne.n	8003534 <_vfiprintf_r+0x1bc>
 8003586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003588:	07d9      	lsls	r1, r3, #31
 800358a:	d405      	bmi.n	8003598 <_vfiprintf_r+0x220>
 800358c:	89ab      	ldrh	r3, [r5, #12]
 800358e:	059a      	lsls	r2, r3, #22
 8003590:	d402      	bmi.n	8003598 <_vfiprintf_r+0x220>
 8003592:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003594:	f7ff fe31 	bl	80031fa <__retarget_lock_release_recursive>
 8003598:	89ab      	ldrh	r3, [r5, #12]
 800359a:	065b      	lsls	r3, r3, #25
 800359c:	f53f af12 	bmi.w	80033c4 <_vfiprintf_r+0x4c>
 80035a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035a2:	e711      	b.n	80033c8 <_vfiprintf_r+0x50>
 80035a4:	ab03      	add	r3, sp, #12
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	462a      	mov	r2, r5
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <_vfiprintf_r+0x258>)
 80035ac:	a904      	add	r1, sp, #16
 80035ae:	4630      	mov	r0, r6
 80035b0:	f000 f880 	bl	80036b4 <_printf_i>
 80035b4:	e7e4      	b.n	8003580 <_vfiprintf_r+0x208>
 80035b6:	bf00      	nop
 80035b8:	08003fe8 	.word	0x08003fe8
 80035bc:	08004008 	.word	0x08004008
 80035c0:	08003fc8 	.word	0x08003fc8
 80035c4:	08004028 	.word	0x08004028
 80035c8:	08004032 	.word	0x08004032
 80035cc:	00000000 	.word	0x00000000
 80035d0:	08003353 	.word	0x08003353
 80035d4:	0800402e 	.word	0x0800402e

080035d8 <_printf_common>:
 80035d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035dc:	4616      	mov	r6, r2
 80035de:	4699      	mov	r9, r3
 80035e0:	688a      	ldr	r2, [r1, #8]
 80035e2:	690b      	ldr	r3, [r1, #16]
 80035e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035e8:	4293      	cmp	r3, r2
 80035ea:	bfb8      	it	lt
 80035ec:	4613      	movlt	r3, r2
 80035ee:	6033      	str	r3, [r6, #0]
 80035f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035f4:	4607      	mov	r7, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	b10a      	cbz	r2, 80035fe <_printf_common+0x26>
 80035fa:	3301      	adds	r3, #1
 80035fc:	6033      	str	r3, [r6, #0]
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	0699      	lsls	r1, r3, #26
 8003602:	bf42      	ittt	mi
 8003604:	6833      	ldrmi	r3, [r6, #0]
 8003606:	3302      	addmi	r3, #2
 8003608:	6033      	strmi	r3, [r6, #0]
 800360a:	6825      	ldr	r5, [r4, #0]
 800360c:	f015 0506 	ands.w	r5, r5, #6
 8003610:	d106      	bne.n	8003620 <_printf_common+0x48>
 8003612:	f104 0a19 	add.w	sl, r4, #25
 8003616:	68e3      	ldr	r3, [r4, #12]
 8003618:	6832      	ldr	r2, [r6, #0]
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	42ab      	cmp	r3, r5
 800361e:	dc26      	bgt.n	800366e <_printf_common+0x96>
 8003620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003624:	1e13      	subs	r3, r2, #0
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	bf18      	it	ne
 800362a:	2301      	movne	r3, #1
 800362c:	0692      	lsls	r2, r2, #26
 800362e:	d42b      	bmi.n	8003688 <_printf_common+0xb0>
 8003630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003634:	4649      	mov	r1, r9
 8003636:	4638      	mov	r0, r7
 8003638:	47c0      	blx	r8
 800363a:	3001      	adds	r0, #1
 800363c:	d01e      	beq.n	800367c <_printf_common+0xa4>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	68e5      	ldr	r5, [r4, #12]
 8003642:	6832      	ldr	r2, [r6, #0]
 8003644:	f003 0306 	and.w	r3, r3, #6
 8003648:	2b04      	cmp	r3, #4
 800364a:	bf08      	it	eq
 800364c:	1aad      	subeq	r5, r5, r2
 800364e:	68a3      	ldr	r3, [r4, #8]
 8003650:	6922      	ldr	r2, [r4, #16]
 8003652:	bf0c      	ite	eq
 8003654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003658:	2500      	movne	r5, #0
 800365a:	4293      	cmp	r3, r2
 800365c:	bfc4      	itt	gt
 800365e:	1a9b      	subgt	r3, r3, r2
 8003660:	18ed      	addgt	r5, r5, r3
 8003662:	2600      	movs	r6, #0
 8003664:	341a      	adds	r4, #26
 8003666:	42b5      	cmp	r5, r6
 8003668:	d11a      	bne.n	80036a0 <_printf_common+0xc8>
 800366a:	2000      	movs	r0, #0
 800366c:	e008      	b.n	8003680 <_printf_common+0xa8>
 800366e:	2301      	movs	r3, #1
 8003670:	4652      	mov	r2, sl
 8003672:	4649      	mov	r1, r9
 8003674:	4638      	mov	r0, r7
 8003676:	47c0      	blx	r8
 8003678:	3001      	adds	r0, #1
 800367a:	d103      	bne.n	8003684 <_printf_common+0xac>
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003684:	3501      	adds	r5, #1
 8003686:	e7c6      	b.n	8003616 <_printf_common+0x3e>
 8003688:	18e1      	adds	r1, r4, r3
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	2030      	movs	r0, #48	; 0x30
 800368e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003692:	4422      	add	r2, r4
 8003694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800369c:	3302      	adds	r3, #2
 800369e:	e7c7      	b.n	8003630 <_printf_common+0x58>
 80036a0:	2301      	movs	r3, #1
 80036a2:	4622      	mov	r2, r4
 80036a4:	4649      	mov	r1, r9
 80036a6:	4638      	mov	r0, r7
 80036a8:	47c0      	blx	r8
 80036aa:	3001      	adds	r0, #1
 80036ac:	d0e6      	beq.n	800367c <_printf_common+0xa4>
 80036ae:	3601      	adds	r6, #1
 80036b0:	e7d9      	b.n	8003666 <_printf_common+0x8e>
	...

080036b4 <_printf_i>:
 80036b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036b8:	7e0f      	ldrb	r7, [r1, #24]
 80036ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036bc:	2f78      	cmp	r7, #120	; 0x78
 80036be:	4691      	mov	r9, r2
 80036c0:	4680      	mov	r8, r0
 80036c2:	460c      	mov	r4, r1
 80036c4:	469a      	mov	sl, r3
 80036c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036ca:	d807      	bhi.n	80036dc <_printf_i+0x28>
 80036cc:	2f62      	cmp	r7, #98	; 0x62
 80036ce:	d80a      	bhi.n	80036e6 <_printf_i+0x32>
 80036d0:	2f00      	cmp	r7, #0
 80036d2:	f000 80d8 	beq.w	8003886 <_printf_i+0x1d2>
 80036d6:	2f58      	cmp	r7, #88	; 0x58
 80036d8:	f000 80a3 	beq.w	8003822 <_printf_i+0x16e>
 80036dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036e4:	e03a      	b.n	800375c <_printf_i+0xa8>
 80036e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ea:	2b15      	cmp	r3, #21
 80036ec:	d8f6      	bhi.n	80036dc <_printf_i+0x28>
 80036ee:	a101      	add	r1, pc, #4	; (adr r1, 80036f4 <_printf_i+0x40>)
 80036f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036f4:	0800374d 	.word	0x0800374d
 80036f8:	08003761 	.word	0x08003761
 80036fc:	080036dd 	.word	0x080036dd
 8003700:	080036dd 	.word	0x080036dd
 8003704:	080036dd 	.word	0x080036dd
 8003708:	080036dd 	.word	0x080036dd
 800370c:	08003761 	.word	0x08003761
 8003710:	080036dd 	.word	0x080036dd
 8003714:	080036dd 	.word	0x080036dd
 8003718:	080036dd 	.word	0x080036dd
 800371c:	080036dd 	.word	0x080036dd
 8003720:	0800386d 	.word	0x0800386d
 8003724:	08003791 	.word	0x08003791
 8003728:	0800384f 	.word	0x0800384f
 800372c:	080036dd 	.word	0x080036dd
 8003730:	080036dd 	.word	0x080036dd
 8003734:	0800388f 	.word	0x0800388f
 8003738:	080036dd 	.word	0x080036dd
 800373c:	08003791 	.word	0x08003791
 8003740:	080036dd 	.word	0x080036dd
 8003744:	080036dd 	.word	0x080036dd
 8003748:	08003857 	.word	0x08003857
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	1d1a      	adds	r2, r3, #4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	602a      	str	r2, [r5, #0]
 8003754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800375c:	2301      	movs	r3, #1
 800375e:	e0a3      	b.n	80038a8 <_printf_i+0x1f4>
 8003760:	6820      	ldr	r0, [r4, #0]
 8003762:	6829      	ldr	r1, [r5, #0]
 8003764:	0606      	lsls	r6, r0, #24
 8003766:	f101 0304 	add.w	r3, r1, #4
 800376a:	d50a      	bpl.n	8003782 <_printf_i+0xce>
 800376c:	680e      	ldr	r6, [r1, #0]
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	2e00      	cmp	r6, #0
 8003772:	da03      	bge.n	800377c <_printf_i+0xc8>
 8003774:	232d      	movs	r3, #45	; 0x2d
 8003776:	4276      	negs	r6, r6
 8003778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800377c:	485e      	ldr	r0, [pc, #376]	; (80038f8 <_printf_i+0x244>)
 800377e:	230a      	movs	r3, #10
 8003780:	e019      	b.n	80037b6 <_printf_i+0x102>
 8003782:	680e      	ldr	r6, [r1, #0]
 8003784:	602b      	str	r3, [r5, #0]
 8003786:	f010 0f40 	tst.w	r0, #64	; 0x40
 800378a:	bf18      	it	ne
 800378c:	b236      	sxthne	r6, r6
 800378e:	e7ef      	b.n	8003770 <_printf_i+0xbc>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	1d19      	adds	r1, r3, #4
 8003796:	6029      	str	r1, [r5, #0]
 8003798:	0601      	lsls	r1, r0, #24
 800379a:	d501      	bpl.n	80037a0 <_printf_i+0xec>
 800379c:	681e      	ldr	r6, [r3, #0]
 800379e:	e002      	b.n	80037a6 <_printf_i+0xf2>
 80037a0:	0646      	lsls	r6, r0, #25
 80037a2:	d5fb      	bpl.n	800379c <_printf_i+0xe8>
 80037a4:	881e      	ldrh	r6, [r3, #0]
 80037a6:	4854      	ldr	r0, [pc, #336]	; (80038f8 <_printf_i+0x244>)
 80037a8:	2f6f      	cmp	r7, #111	; 0x6f
 80037aa:	bf0c      	ite	eq
 80037ac:	2308      	moveq	r3, #8
 80037ae:	230a      	movne	r3, #10
 80037b0:	2100      	movs	r1, #0
 80037b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037b6:	6865      	ldr	r5, [r4, #4]
 80037b8:	60a5      	str	r5, [r4, #8]
 80037ba:	2d00      	cmp	r5, #0
 80037bc:	bfa2      	ittt	ge
 80037be:	6821      	ldrge	r1, [r4, #0]
 80037c0:	f021 0104 	bicge.w	r1, r1, #4
 80037c4:	6021      	strge	r1, [r4, #0]
 80037c6:	b90e      	cbnz	r6, 80037cc <_printf_i+0x118>
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	d04d      	beq.n	8003868 <_printf_i+0x1b4>
 80037cc:	4615      	mov	r5, r2
 80037ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80037d2:	fb03 6711 	mls	r7, r3, r1, r6
 80037d6:	5dc7      	ldrb	r7, [r0, r7]
 80037d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037dc:	4637      	mov	r7, r6
 80037de:	42bb      	cmp	r3, r7
 80037e0:	460e      	mov	r6, r1
 80037e2:	d9f4      	bls.n	80037ce <_printf_i+0x11a>
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d10b      	bne.n	8003800 <_printf_i+0x14c>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	07de      	lsls	r6, r3, #31
 80037ec:	d508      	bpl.n	8003800 <_printf_i+0x14c>
 80037ee:	6923      	ldr	r3, [r4, #16]
 80037f0:	6861      	ldr	r1, [r4, #4]
 80037f2:	4299      	cmp	r1, r3
 80037f4:	bfde      	ittt	le
 80037f6:	2330      	movle	r3, #48	; 0x30
 80037f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003800:	1b52      	subs	r2, r2, r5
 8003802:	6122      	str	r2, [r4, #16]
 8003804:	f8cd a000 	str.w	sl, [sp]
 8003808:	464b      	mov	r3, r9
 800380a:	aa03      	add	r2, sp, #12
 800380c:	4621      	mov	r1, r4
 800380e:	4640      	mov	r0, r8
 8003810:	f7ff fee2 	bl	80035d8 <_printf_common>
 8003814:	3001      	adds	r0, #1
 8003816:	d14c      	bne.n	80038b2 <_printf_i+0x1fe>
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	b004      	add	sp, #16
 800381e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003822:	4835      	ldr	r0, [pc, #212]	; (80038f8 <_printf_i+0x244>)
 8003824:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003828:	6829      	ldr	r1, [r5, #0]
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003830:	6029      	str	r1, [r5, #0]
 8003832:	061d      	lsls	r5, r3, #24
 8003834:	d514      	bpl.n	8003860 <_printf_i+0x1ac>
 8003836:	07df      	lsls	r7, r3, #31
 8003838:	bf44      	itt	mi
 800383a:	f043 0320 	orrmi.w	r3, r3, #32
 800383e:	6023      	strmi	r3, [r4, #0]
 8003840:	b91e      	cbnz	r6, 800384a <_printf_i+0x196>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	f023 0320 	bic.w	r3, r3, #32
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	2310      	movs	r3, #16
 800384c:	e7b0      	b.n	80037b0 <_printf_i+0xfc>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	f043 0320 	orr.w	r3, r3, #32
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	2378      	movs	r3, #120	; 0x78
 8003858:	4828      	ldr	r0, [pc, #160]	; (80038fc <_printf_i+0x248>)
 800385a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800385e:	e7e3      	b.n	8003828 <_printf_i+0x174>
 8003860:	0659      	lsls	r1, r3, #25
 8003862:	bf48      	it	mi
 8003864:	b2b6      	uxthmi	r6, r6
 8003866:	e7e6      	b.n	8003836 <_printf_i+0x182>
 8003868:	4615      	mov	r5, r2
 800386a:	e7bb      	b.n	80037e4 <_printf_i+0x130>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	6826      	ldr	r6, [r4, #0]
 8003870:	6961      	ldr	r1, [r4, #20]
 8003872:	1d18      	adds	r0, r3, #4
 8003874:	6028      	str	r0, [r5, #0]
 8003876:	0635      	lsls	r5, r6, #24
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	d501      	bpl.n	8003880 <_printf_i+0x1cc>
 800387c:	6019      	str	r1, [r3, #0]
 800387e:	e002      	b.n	8003886 <_printf_i+0x1d2>
 8003880:	0670      	lsls	r0, r6, #25
 8003882:	d5fb      	bpl.n	800387c <_printf_i+0x1c8>
 8003884:	8019      	strh	r1, [r3, #0]
 8003886:	2300      	movs	r3, #0
 8003888:	6123      	str	r3, [r4, #16]
 800388a:	4615      	mov	r5, r2
 800388c:	e7ba      	b.n	8003804 <_printf_i+0x150>
 800388e:	682b      	ldr	r3, [r5, #0]
 8003890:	1d1a      	adds	r2, r3, #4
 8003892:	602a      	str	r2, [r5, #0]
 8003894:	681d      	ldr	r5, [r3, #0]
 8003896:	6862      	ldr	r2, [r4, #4]
 8003898:	2100      	movs	r1, #0
 800389a:	4628      	mov	r0, r5
 800389c:	f7fc fc98 	bl	80001d0 <memchr>
 80038a0:	b108      	cbz	r0, 80038a6 <_printf_i+0x1f2>
 80038a2:	1b40      	subs	r0, r0, r5
 80038a4:	6060      	str	r0, [r4, #4]
 80038a6:	6863      	ldr	r3, [r4, #4]
 80038a8:	6123      	str	r3, [r4, #16]
 80038aa:	2300      	movs	r3, #0
 80038ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038b0:	e7a8      	b.n	8003804 <_printf_i+0x150>
 80038b2:	6923      	ldr	r3, [r4, #16]
 80038b4:	462a      	mov	r2, r5
 80038b6:	4649      	mov	r1, r9
 80038b8:	4640      	mov	r0, r8
 80038ba:	47d0      	blx	sl
 80038bc:	3001      	adds	r0, #1
 80038be:	d0ab      	beq.n	8003818 <_printf_i+0x164>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	079b      	lsls	r3, r3, #30
 80038c4:	d413      	bmi.n	80038ee <_printf_i+0x23a>
 80038c6:	68e0      	ldr	r0, [r4, #12]
 80038c8:	9b03      	ldr	r3, [sp, #12]
 80038ca:	4298      	cmp	r0, r3
 80038cc:	bfb8      	it	lt
 80038ce:	4618      	movlt	r0, r3
 80038d0:	e7a4      	b.n	800381c <_printf_i+0x168>
 80038d2:	2301      	movs	r3, #1
 80038d4:	4632      	mov	r2, r6
 80038d6:	4649      	mov	r1, r9
 80038d8:	4640      	mov	r0, r8
 80038da:	47d0      	blx	sl
 80038dc:	3001      	adds	r0, #1
 80038de:	d09b      	beq.n	8003818 <_printf_i+0x164>
 80038e0:	3501      	adds	r5, #1
 80038e2:	68e3      	ldr	r3, [r4, #12]
 80038e4:	9903      	ldr	r1, [sp, #12]
 80038e6:	1a5b      	subs	r3, r3, r1
 80038e8:	42ab      	cmp	r3, r5
 80038ea:	dcf2      	bgt.n	80038d2 <_printf_i+0x21e>
 80038ec:	e7eb      	b.n	80038c6 <_printf_i+0x212>
 80038ee:	2500      	movs	r5, #0
 80038f0:	f104 0619 	add.w	r6, r4, #25
 80038f4:	e7f5      	b.n	80038e2 <_printf_i+0x22e>
 80038f6:	bf00      	nop
 80038f8:	08004039 	.word	0x08004039
 80038fc:	0800404a 	.word	0x0800404a

08003900 <_putc_r>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	460d      	mov	r5, r1
 8003904:	4614      	mov	r4, r2
 8003906:	4606      	mov	r6, r0
 8003908:	b118      	cbz	r0, 8003912 <_putc_r+0x12>
 800390a:	6983      	ldr	r3, [r0, #24]
 800390c:	b90b      	cbnz	r3, 8003912 <_putc_r+0x12>
 800390e:	f7ff fbd5 	bl	80030bc <__sinit>
 8003912:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <_putc_r+0x84>)
 8003914:	429c      	cmp	r4, r3
 8003916:	d124      	bne.n	8003962 <_putc_r+0x62>
 8003918:	6874      	ldr	r4, [r6, #4]
 800391a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800391c:	07d8      	lsls	r0, r3, #31
 800391e:	d405      	bmi.n	800392c <_putc_r+0x2c>
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	0599      	lsls	r1, r3, #22
 8003924:	d402      	bmi.n	800392c <_putc_r+0x2c>
 8003926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003928:	f7ff fc66 	bl	80031f8 <__retarget_lock_acquire_recursive>
 800392c:	68a3      	ldr	r3, [r4, #8]
 800392e:	3b01      	subs	r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	60a3      	str	r3, [r4, #8]
 8003934:	da05      	bge.n	8003942 <_putc_r+0x42>
 8003936:	69a2      	ldr	r2, [r4, #24]
 8003938:	4293      	cmp	r3, r2
 800393a:	db1c      	blt.n	8003976 <_putc_r+0x76>
 800393c:	b2eb      	uxtb	r3, r5
 800393e:	2b0a      	cmp	r3, #10
 8003940:	d019      	beq.n	8003976 <_putc_r+0x76>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	6022      	str	r2, [r4, #0]
 8003948:	701d      	strb	r5, [r3, #0]
 800394a:	b2ed      	uxtb	r5, r5
 800394c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800394e:	07da      	lsls	r2, r3, #31
 8003950:	d405      	bmi.n	800395e <_putc_r+0x5e>
 8003952:	89a3      	ldrh	r3, [r4, #12]
 8003954:	059b      	lsls	r3, r3, #22
 8003956:	d402      	bmi.n	800395e <_putc_r+0x5e>
 8003958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800395a:	f7ff fc4e 	bl	80031fa <__retarget_lock_release_recursive>
 800395e:	4628      	mov	r0, r5
 8003960:	bd70      	pop	{r4, r5, r6, pc}
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <_putc_r+0x88>)
 8003964:	429c      	cmp	r4, r3
 8003966:	d101      	bne.n	800396c <_putc_r+0x6c>
 8003968:	68b4      	ldr	r4, [r6, #8]
 800396a:	e7d6      	b.n	800391a <_putc_r+0x1a>
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <_putc_r+0x8c>)
 800396e:	429c      	cmp	r4, r3
 8003970:	bf08      	it	eq
 8003972:	68f4      	ldreq	r4, [r6, #12]
 8003974:	e7d1      	b.n	800391a <_putc_r+0x1a>
 8003976:	4629      	mov	r1, r5
 8003978:	4622      	mov	r2, r4
 800397a:	4630      	mov	r0, r6
 800397c:	f000 f85c 	bl	8003a38 <__swbuf_r>
 8003980:	4605      	mov	r5, r0
 8003982:	e7e3      	b.n	800394c <_putc_r+0x4c>
 8003984:	08003fe8 	.word	0x08003fe8
 8003988:	08004008 	.word	0x08004008
 800398c:	08003fc8 	.word	0x08003fc8

08003990 <_sbrk_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	4d06      	ldr	r5, [pc, #24]	; (80039ac <_sbrk_r+0x1c>)
 8003994:	2300      	movs	r3, #0
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	f7fd fa0c 	bl	8000db8 <_sbrk>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_sbrk_r+0x1a>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_sbrk_r+0x1a>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	200000fc 	.word	0x200000fc

080039b0 <__sread>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	460c      	mov	r4, r1
 80039b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b8:	f000 fab2 	bl	8003f20 <_read_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	bfab      	itete	ge
 80039c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039c2:	89a3      	ldrhlt	r3, [r4, #12]
 80039c4:	181b      	addge	r3, r3, r0
 80039c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039ca:	bfac      	ite	ge
 80039cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80039ce:	81a3      	strhlt	r3, [r4, #12]
 80039d0:	bd10      	pop	{r4, pc}

080039d2 <__swrite>:
 80039d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d6:	461f      	mov	r7, r3
 80039d8:	898b      	ldrh	r3, [r1, #12]
 80039da:	05db      	lsls	r3, r3, #23
 80039dc:	4605      	mov	r5, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	4616      	mov	r6, r2
 80039e2:	d505      	bpl.n	80039f0 <__swrite+0x1e>
 80039e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e8:	2302      	movs	r3, #2
 80039ea:	2200      	movs	r2, #0
 80039ec:	f000 f9c8 	bl	8003d80 <_lseek_r>
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039fa:	81a3      	strh	r3, [r4, #12]
 80039fc:	4632      	mov	r2, r6
 80039fe:	463b      	mov	r3, r7
 8003a00:	4628      	mov	r0, r5
 8003a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a06:	f000 b869 	b.w	8003adc <_write_r>

08003a0a <__sseek>:
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a12:	f000 f9b5 	bl	8003d80 <_lseek_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	bf15      	itete	ne
 8003a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a26:	81a3      	strheq	r3, [r4, #12]
 8003a28:	bf18      	it	ne
 8003a2a:	81a3      	strhne	r3, [r4, #12]
 8003a2c:	bd10      	pop	{r4, pc}

08003a2e <__sclose>:
 8003a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a32:	f000 b8d3 	b.w	8003bdc <_close_r>
	...

08003a38 <__swbuf_r>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	460e      	mov	r6, r1
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	4605      	mov	r5, r0
 8003a40:	b118      	cbz	r0, 8003a4a <__swbuf_r+0x12>
 8003a42:	6983      	ldr	r3, [r0, #24]
 8003a44:	b90b      	cbnz	r3, 8003a4a <__swbuf_r+0x12>
 8003a46:	f7ff fb39 	bl	80030bc <__sinit>
 8003a4a:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <__swbuf_r+0x98>)
 8003a4c:	429c      	cmp	r4, r3
 8003a4e:	d12b      	bne.n	8003aa8 <__swbuf_r+0x70>
 8003a50:	686c      	ldr	r4, [r5, #4]
 8003a52:	69a3      	ldr	r3, [r4, #24]
 8003a54:	60a3      	str	r3, [r4, #8]
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	071a      	lsls	r2, r3, #28
 8003a5a:	d52f      	bpl.n	8003abc <__swbuf_r+0x84>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	b36b      	cbz	r3, 8003abc <__swbuf_r+0x84>
 8003a60:	6923      	ldr	r3, [r4, #16]
 8003a62:	6820      	ldr	r0, [r4, #0]
 8003a64:	1ac0      	subs	r0, r0, r3
 8003a66:	6963      	ldr	r3, [r4, #20]
 8003a68:	b2f6      	uxtb	r6, r6
 8003a6a:	4283      	cmp	r3, r0
 8003a6c:	4637      	mov	r7, r6
 8003a6e:	dc04      	bgt.n	8003a7a <__swbuf_r+0x42>
 8003a70:	4621      	mov	r1, r4
 8003a72:	4628      	mov	r0, r5
 8003a74:	f000 f948 	bl	8003d08 <_fflush_r>
 8003a78:	bb30      	cbnz	r0, 8003ac8 <__swbuf_r+0x90>
 8003a7a:	68a3      	ldr	r3, [r4, #8]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	60a3      	str	r3, [r4, #8]
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	6022      	str	r2, [r4, #0]
 8003a86:	701e      	strb	r6, [r3, #0]
 8003a88:	6963      	ldr	r3, [r4, #20]
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	4283      	cmp	r3, r0
 8003a8e:	d004      	beq.n	8003a9a <__swbuf_r+0x62>
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	07db      	lsls	r3, r3, #31
 8003a94:	d506      	bpl.n	8003aa4 <__swbuf_r+0x6c>
 8003a96:	2e0a      	cmp	r6, #10
 8003a98:	d104      	bne.n	8003aa4 <__swbuf_r+0x6c>
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f000 f933 	bl	8003d08 <_fflush_r>
 8003aa2:	b988      	cbnz	r0, 8003ac8 <__swbuf_r+0x90>
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <__swbuf_r+0x9c>)
 8003aaa:	429c      	cmp	r4, r3
 8003aac:	d101      	bne.n	8003ab2 <__swbuf_r+0x7a>
 8003aae:	68ac      	ldr	r4, [r5, #8]
 8003ab0:	e7cf      	b.n	8003a52 <__swbuf_r+0x1a>
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <__swbuf_r+0xa0>)
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	bf08      	it	eq
 8003ab8:	68ec      	ldreq	r4, [r5, #12]
 8003aba:	e7ca      	b.n	8003a52 <__swbuf_r+0x1a>
 8003abc:	4621      	mov	r1, r4
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f000 f81e 	bl	8003b00 <__swsetup_r>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d0cb      	beq.n	8003a60 <__swbuf_r+0x28>
 8003ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8003acc:	e7ea      	b.n	8003aa4 <__swbuf_r+0x6c>
 8003ace:	bf00      	nop
 8003ad0:	08003fe8 	.word	0x08003fe8
 8003ad4:	08004008 	.word	0x08004008
 8003ad8:	08003fc8 	.word	0x08003fc8

08003adc <_write_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d07      	ldr	r5, [pc, #28]	; (8003afc <_write_r+0x20>)
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	602a      	str	r2, [r5, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f7fc fdd8 	bl	80006a0 <_write>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_write_r+0x1e>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_write_r+0x1e>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	200000fc 	.word	0x200000fc

08003b00 <__swsetup_r>:
 8003b00:	4b32      	ldr	r3, [pc, #200]	; (8003bcc <__swsetup_r+0xcc>)
 8003b02:	b570      	push	{r4, r5, r6, lr}
 8003b04:	681d      	ldr	r5, [r3, #0]
 8003b06:	4606      	mov	r6, r0
 8003b08:	460c      	mov	r4, r1
 8003b0a:	b125      	cbz	r5, 8003b16 <__swsetup_r+0x16>
 8003b0c:	69ab      	ldr	r3, [r5, #24]
 8003b0e:	b913      	cbnz	r3, 8003b16 <__swsetup_r+0x16>
 8003b10:	4628      	mov	r0, r5
 8003b12:	f7ff fad3 	bl	80030bc <__sinit>
 8003b16:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <__swsetup_r+0xd0>)
 8003b18:	429c      	cmp	r4, r3
 8003b1a:	d10f      	bne.n	8003b3c <__swsetup_r+0x3c>
 8003b1c:	686c      	ldr	r4, [r5, #4]
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b24:	0719      	lsls	r1, r3, #28
 8003b26:	d42c      	bmi.n	8003b82 <__swsetup_r+0x82>
 8003b28:	06dd      	lsls	r5, r3, #27
 8003b2a:	d411      	bmi.n	8003b50 <__swsetup_r+0x50>
 8003b2c:	2309      	movs	r3, #9
 8003b2e:	6033      	str	r3, [r6, #0]
 8003b30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3a:	e03e      	b.n	8003bba <__swsetup_r+0xba>
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <__swsetup_r+0xd4>)
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d101      	bne.n	8003b46 <__swsetup_r+0x46>
 8003b42:	68ac      	ldr	r4, [r5, #8]
 8003b44:	e7eb      	b.n	8003b1e <__swsetup_r+0x1e>
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <__swsetup_r+0xd8>)
 8003b48:	429c      	cmp	r4, r3
 8003b4a:	bf08      	it	eq
 8003b4c:	68ec      	ldreq	r4, [r5, #12]
 8003b4e:	e7e6      	b.n	8003b1e <__swsetup_r+0x1e>
 8003b50:	0758      	lsls	r0, r3, #29
 8003b52:	d512      	bpl.n	8003b7a <__swsetup_r+0x7a>
 8003b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b56:	b141      	cbz	r1, 8003b6a <__swsetup_r+0x6a>
 8003b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b5c:	4299      	cmp	r1, r3
 8003b5e:	d002      	beq.n	8003b66 <__swsetup_r+0x66>
 8003b60:	4630      	mov	r0, r6
 8003b62:	f000 f991 	bl	8003e88 <_free_r>
 8003b66:	2300      	movs	r3, #0
 8003b68:	6363      	str	r3, [r4, #52]	; 0x34
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b70:	81a3      	strh	r3, [r4, #12]
 8003b72:	2300      	movs	r3, #0
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	6923      	ldr	r3, [r4, #16]
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	f043 0308 	orr.w	r3, r3, #8
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	6923      	ldr	r3, [r4, #16]
 8003b84:	b94b      	cbnz	r3, 8003b9a <__swsetup_r+0x9a>
 8003b86:	89a3      	ldrh	r3, [r4, #12]
 8003b88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b90:	d003      	beq.n	8003b9a <__swsetup_r+0x9a>
 8003b92:	4621      	mov	r1, r4
 8003b94:	4630      	mov	r0, r6
 8003b96:	f000 f92b 	bl	8003df0 <__smakebuf_r>
 8003b9a:	89a0      	ldrh	r0, [r4, #12]
 8003b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ba0:	f010 0301 	ands.w	r3, r0, #1
 8003ba4:	d00a      	beq.n	8003bbc <__swsetup_r+0xbc>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60a3      	str	r3, [r4, #8]
 8003baa:	6963      	ldr	r3, [r4, #20]
 8003bac:	425b      	negs	r3, r3
 8003bae:	61a3      	str	r3, [r4, #24]
 8003bb0:	6923      	ldr	r3, [r4, #16]
 8003bb2:	b943      	cbnz	r3, 8003bc6 <__swsetup_r+0xc6>
 8003bb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bb8:	d1ba      	bne.n	8003b30 <__swsetup_r+0x30>
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	0781      	lsls	r1, r0, #30
 8003bbe:	bf58      	it	pl
 8003bc0:	6963      	ldrpl	r3, [r4, #20]
 8003bc2:	60a3      	str	r3, [r4, #8]
 8003bc4:	e7f4      	b.n	8003bb0 <__swsetup_r+0xb0>
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e7f7      	b.n	8003bba <__swsetup_r+0xba>
 8003bca:	bf00      	nop
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	08003fe8 	.word	0x08003fe8
 8003bd4:	08004008 	.word	0x08004008
 8003bd8:	08003fc8 	.word	0x08003fc8

08003bdc <_close_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4d06      	ldr	r5, [pc, #24]	; (8003bf8 <_close_r+0x1c>)
 8003be0:	2300      	movs	r3, #0
 8003be2:	4604      	mov	r4, r0
 8003be4:	4608      	mov	r0, r1
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	f7fd f8b1 	bl	8000d4e <_close>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_close_r+0x1a>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_close_r+0x1a>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	200000fc 	.word	0x200000fc

08003bfc <__sflush_r>:
 8003bfc:	898a      	ldrh	r2, [r1, #12]
 8003bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c02:	4605      	mov	r5, r0
 8003c04:	0710      	lsls	r0, r2, #28
 8003c06:	460c      	mov	r4, r1
 8003c08:	d458      	bmi.n	8003cbc <__sflush_r+0xc0>
 8003c0a:	684b      	ldr	r3, [r1, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	dc05      	bgt.n	8003c1c <__sflush_r+0x20>
 8003c10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	dc02      	bgt.n	8003c1c <__sflush_r+0x20>
 8003c16:	2000      	movs	r0, #0
 8003c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c1e:	2e00      	cmp	r6, #0
 8003c20:	d0f9      	beq.n	8003c16 <__sflush_r+0x1a>
 8003c22:	2300      	movs	r3, #0
 8003c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c28:	682f      	ldr	r7, [r5, #0]
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	d032      	beq.n	8003c94 <__sflush_r+0x98>
 8003c2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	075a      	lsls	r2, r3, #29
 8003c34:	d505      	bpl.n	8003c42 <__sflush_r+0x46>
 8003c36:	6863      	ldr	r3, [r4, #4]
 8003c38:	1ac0      	subs	r0, r0, r3
 8003c3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c3c:	b10b      	cbz	r3, 8003c42 <__sflush_r+0x46>
 8003c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c40:	1ac0      	subs	r0, r0, r3
 8003c42:	2300      	movs	r3, #0
 8003c44:	4602      	mov	r2, r0
 8003c46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c48:	6a21      	ldr	r1, [r4, #32]
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	47b0      	blx	r6
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	d106      	bne.n	8003c62 <__sflush_r+0x66>
 8003c54:	6829      	ldr	r1, [r5, #0]
 8003c56:	291d      	cmp	r1, #29
 8003c58:	d82c      	bhi.n	8003cb4 <__sflush_r+0xb8>
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <__sflush_r+0x108>)
 8003c5c:	40ca      	lsrs	r2, r1
 8003c5e:	07d6      	lsls	r6, r2, #31
 8003c60:	d528      	bpl.n	8003cb4 <__sflush_r+0xb8>
 8003c62:	2200      	movs	r2, #0
 8003c64:	6062      	str	r2, [r4, #4]
 8003c66:	04d9      	lsls	r1, r3, #19
 8003c68:	6922      	ldr	r2, [r4, #16]
 8003c6a:	6022      	str	r2, [r4, #0]
 8003c6c:	d504      	bpl.n	8003c78 <__sflush_r+0x7c>
 8003c6e:	1c42      	adds	r2, r0, #1
 8003c70:	d101      	bne.n	8003c76 <__sflush_r+0x7a>
 8003c72:	682b      	ldr	r3, [r5, #0]
 8003c74:	b903      	cbnz	r3, 8003c78 <__sflush_r+0x7c>
 8003c76:	6560      	str	r0, [r4, #84]	; 0x54
 8003c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c7a:	602f      	str	r7, [r5, #0]
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d0ca      	beq.n	8003c16 <__sflush_r+0x1a>
 8003c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c84:	4299      	cmp	r1, r3
 8003c86:	d002      	beq.n	8003c8e <__sflush_r+0x92>
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f000 f8fd 	bl	8003e88 <_free_r>
 8003c8e:	2000      	movs	r0, #0
 8003c90:	6360      	str	r0, [r4, #52]	; 0x34
 8003c92:	e7c1      	b.n	8003c18 <__sflush_r+0x1c>
 8003c94:	6a21      	ldr	r1, [r4, #32]
 8003c96:	2301      	movs	r3, #1
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b0      	blx	r6
 8003c9c:	1c41      	adds	r1, r0, #1
 8003c9e:	d1c7      	bne.n	8003c30 <__sflush_r+0x34>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0c4      	beq.n	8003c30 <__sflush_r+0x34>
 8003ca6:	2b1d      	cmp	r3, #29
 8003ca8:	d001      	beq.n	8003cae <__sflush_r+0xb2>
 8003caa:	2b16      	cmp	r3, #22
 8003cac:	d101      	bne.n	8003cb2 <__sflush_r+0xb6>
 8003cae:	602f      	str	r7, [r5, #0]
 8003cb0:	e7b1      	b.n	8003c16 <__sflush_r+0x1a>
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb8:	81a3      	strh	r3, [r4, #12]
 8003cba:	e7ad      	b.n	8003c18 <__sflush_r+0x1c>
 8003cbc:	690f      	ldr	r7, [r1, #16]
 8003cbe:	2f00      	cmp	r7, #0
 8003cc0:	d0a9      	beq.n	8003c16 <__sflush_r+0x1a>
 8003cc2:	0793      	lsls	r3, r2, #30
 8003cc4:	680e      	ldr	r6, [r1, #0]
 8003cc6:	bf08      	it	eq
 8003cc8:	694b      	ldreq	r3, [r1, #20]
 8003cca:	600f      	str	r7, [r1, #0]
 8003ccc:	bf18      	it	ne
 8003cce:	2300      	movne	r3, #0
 8003cd0:	eba6 0807 	sub.w	r8, r6, r7
 8003cd4:	608b      	str	r3, [r1, #8]
 8003cd6:	f1b8 0f00 	cmp.w	r8, #0
 8003cda:	dd9c      	ble.n	8003c16 <__sflush_r+0x1a>
 8003cdc:	6a21      	ldr	r1, [r4, #32]
 8003cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	463a      	mov	r2, r7
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b0      	blx	r6
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	dc06      	bgt.n	8003cfa <__sflush_r+0xfe>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf2:	81a3      	strh	r3, [r4, #12]
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	e78e      	b.n	8003c18 <__sflush_r+0x1c>
 8003cfa:	4407      	add	r7, r0
 8003cfc:	eba8 0800 	sub.w	r8, r8, r0
 8003d00:	e7e9      	b.n	8003cd6 <__sflush_r+0xda>
 8003d02:	bf00      	nop
 8003d04:	20400001 	.word	0x20400001

08003d08 <_fflush_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	690b      	ldr	r3, [r1, #16]
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	b913      	cbnz	r3, 8003d18 <_fflush_r+0x10>
 8003d12:	2500      	movs	r5, #0
 8003d14:	4628      	mov	r0, r5
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	b118      	cbz	r0, 8003d22 <_fflush_r+0x1a>
 8003d1a:	6983      	ldr	r3, [r0, #24]
 8003d1c:	b90b      	cbnz	r3, 8003d22 <_fflush_r+0x1a>
 8003d1e:	f7ff f9cd 	bl	80030bc <__sinit>
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <_fflush_r+0x6c>)
 8003d24:	429c      	cmp	r4, r3
 8003d26:	d11b      	bne.n	8003d60 <_fflush_r+0x58>
 8003d28:	686c      	ldr	r4, [r5, #4]
 8003d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ef      	beq.n	8003d12 <_fflush_r+0xa>
 8003d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d34:	07d0      	lsls	r0, r2, #31
 8003d36:	d404      	bmi.n	8003d42 <_fflush_r+0x3a>
 8003d38:	0599      	lsls	r1, r3, #22
 8003d3a:	d402      	bmi.n	8003d42 <_fflush_r+0x3a>
 8003d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d3e:	f7ff fa5b 	bl	80031f8 <__retarget_lock_acquire_recursive>
 8003d42:	4628      	mov	r0, r5
 8003d44:	4621      	mov	r1, r4
 8003d46:	f7ff ff59 	bl	8003bfc <__sflush_r>
 8003d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d4c:	07da      	lsls	r2, r3, #31
 8003d4e:	4605      	mov	r5, r0
 8003d50:	d4e0      	bmi.n	8003d14 <_fflush_r+0xc>
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	059b      	lsls	r3, r3, #22
 8003d56:	d4dd      	bmi.n	8003d14 <_fflush_r+0xc>
 8003d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d5a:	f7ff fa4e 	bl	80031fa <__retarget_lock_release_recursive>
 8003d5e:	e7d9      	b.n	8003d14 <_fflush_r+0xc>
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <_fflush_r+0x70>)
 8003d62:	429c      	cmp	r4, r3
 8003d64:	d101      	bne.n	8003d6a <_fflush_r+0x62>
 8003d66:	68ac      	ldr	r4, [r5, #8]
 8003d68:	e7df      	b.n	8003d2a <_fflush_r+0x22>
 8003d6a:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <_fflush_r+0x74>)
 8003d6c:	429c      	cmp	r4, r3
 8003d6e:	bf08      	it	eq
 8003d70:	68ec      	ldreq	r4, [r5, #12]
 8003d72:	e7da      	b.n	8003d2a <_fflush_r+0x22>
 8003d74:	08003fe8 	.word	0x08003fe8
 8003d78:	08004008 	.word	0x08004008
 8003d7c:	08003fc8 	.word	0x08003fc8

08003d80 <_lseek_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4d07      	ldr	r5, [pc, #28]	; (8003da0 <_lseek_r+0x20>)
 8003d84:	4604      	mov	r4, r0
 8003d86:	4608      	mov	r0, r1
 8003d88:	4611      	mov	r1, r2
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	602a      	str	r2, [r5, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f7fd f804 	bl	8000d9c <_lseek>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d102      	bne.n	8003d9e <_lseek_r+0x1e>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	b103      	cbz	r3, 8003d9e <_lseek_r+0x1e>
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	200000fc 	.word	0x200000fc

08003da4 <__swhatbuf_r>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	460e      	mov	r6, r1
 8003da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dac:	2900      	cmp	r1, #0
 8003dae:	b096      	sub	sp, #88	; 0x58
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	da08      	bge.n	8003dc8 <__swhatbuf_r+0x24>
 8003db6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	602a      	str	r2, [r5, #0]
 8003dbe:	061a      	lsls	r2, r3, #24
 8003dc0:	d410      	bmi.n	8003de4 <__swhatbuf_r+0x40>
 8003dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc6:	e00e      	b.n	8003de6 <__swhatbuf_r+0x42>
 8003dc8:	466a      	mov	r2, sp
 8003dca:	f000 f8bb 	bl	8003f44 <_fstat_r>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	dbf1      	blt.n	8003db6 <__swhatbuf_r+0x12>
 8003dd2:	9a01      	ldr	r2, [sp, #4]
 8003dd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003dd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ddc:	425a      	negs	r2, r3
 8003dde:	415a      	adcs	r2, r3
 8003de0:	602a      	str	r2, [r5, #0]
 8003de2:	e7ee      	b.n	8003dc2 <__swhatbuf_r+0x1e>
 8003de4:	2340      	movs	r3, #64	; 0x40
 8003de6:	2000      	movs	r0, #0
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	b016      	add	sp, #88	; 0x58
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08003df0 <__smakebuf_r>:
 8003df0:	898b      	ldrh	r3, [r1, #12]
 8003df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003df4:	079d      	lsls	r5, r3, #30
 8003df6:	4606      	mov	r6, r0
 8003df8:	460c      	mov	r4, r1
 8003dfa:	d507      	bpl.n	8003e0c <__smakebuf_r+0x1c>
 8003dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	2301      	movs	r3, #1
 8003e06:	6163      	str	r3, [r4, #20]
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	ab01      	add	r3, sp, #4
 8003e0e:	466a      	mov	r2, sp
 8003e10:	f7ff ffc8 	bl	8003da4 <__swhatbuf_r>
 8003e14:	9900      	ldr	r1, [sp, #0]
 8003e16:	4605      	mov	r5, r0
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f7ff fa0f 	bl	800323c <_malloc_r>
 8003e1e:	b948      	cbnz	r0, 8003e34 <__smakebuf_r+0x44>
 8003e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e24:	059a      	lsls	r2, r3, #22
 8003e26:	d4ef      	bmi.n	8003e08 <__smakebuf_r+0x18>
 8003e28:	f023 0303 	bic.w	r3, r3, #3
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	81a3      	strh	r3, [r4, #12]
 8003e32:	e7e3      	b.n	8003dfc <__smakebuf_r+0xc>
 8003e34:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <__smakebuf_r+0x7c>)
 8003e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	6020      	str	r0, [r4, #0]
 8003e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	9b00      	ldr	r3, [sp, #0]
 8003e44:	6163      	str	r3, [r4, #20]
 8003e46:	9b01      	ldr	r3, [sp, #4]
 8003e48:	6120      	str	r0, [r4, #16]
 8003e4a:	b15b      	cbz	r3, 8003e64 <__smakebuf_r+0x74>
 8003e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e50:	4630      	mov	r0, r6
 8003e52:	f000 f889 	bl	8003f68 <_isatty_r>
 8003e56:	b128      	cbz	r0, 8003e64 <__smakebuf_r+0x74>
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	f023 0303 	bic.w	r3, r3, #3
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	89a0      	ldrh	r0, [r4, #12]
 8003e66:	4305      	orrs	r5, r0
 8003e68:	81a5      	strh	r5, [r4, #12]
 8003e6a:	e7cd      	b.n	8003e08 <__smakebuf_r+0x18>
 8003e6c:	08003055 	.word	0x08003055

08003e70 <__malloc_lock>:
 8003e70:	4801      	ldr	r0, [pc, #4]	; (8003e78 <__malloc_lock+0x8>)
 8003e72:	f7ff b9c1 	b.w	80031f8 <__retarget_lock_acquire_recursive>
 8003e76:	bf00      	nop
 8003e78:	200000f0 	.word	0x200000f0

08003e7c <__malloc_unlock>:
 8003e7c:	4801      	ldr	r0, [pc, #4]	; (8003e84 <__malloc_unlock+0x8>)
 8003e7e:	f7ff b9bc 	b.w	80031fa <__retarget_lock_release_recursive>
 8003e82:	bf00      	nop
 8003e84:	200000f0 	.word	0x200000f0

08003e88 <_free_r>:
 8003e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e8a:	2900      	cmp	r1, #0
 8003e8c:	d044      	beq.n	8003f18 <_free_r+0x90>
 8003e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e92:	9001      	str	r0, [sp, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f1a1 0404 	sub.w	r4, r1, #4
 8003e9a:	bfb8      	it	lt
 8003e9c:	18e4      	addlt	r4, r4, r3
 8003e9e:	f7ff ffe7 	bl	8003e70 <__malloc_lock>
 8003ea2:	4a1e      	ldr	r2, [pc, #120]	; (8003f1c <_free_r+0x94>)
 8003ea4:	9801      	ldr	r0, [sp, #4]
 8003ea6:	6813      	ldr	r3, [r2, #0]
 8003ea8:	b933      	cbnz	r3, 8003eb8 <_free_r+0x30>
 8003eaa:	6063      	str	r3, [r4, #4]
 8003eac:	6014      	str	r4, [r2, #0]
 8003eae:	b003      	add	sp, #12
 8003eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eb4:	f7ff bfe2 	b.w	8003e7c <__malloc_unlock>
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	d908      	bls.n	8003ece <_free_r+0x46>
 8003ebc:	6825      	ldr	r5, [r4, #0]
 8003ebe:	1961      	adds	r1, r4, r5
 8003ec0:	428b      	cmp	r3, r1
 8003ec2:	bf01      	itttt	eq
 8003ec4:	6819      	ldreq	r1, [r3, #0]
 8003ec6:	685b      	ldreq	r3, [r3, #4]
 8003ec8:	1949      	addeq	r1, r1, r5
 8003eca:	6021      	streq	r1, [r4, #0]
 8003ecc:	e7ed      	b.n	8003eaa <_free_r+0x22>
 8003ece:	461a      	mov	r2, r3
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	b10b      	cbz	r3, 8003ed8 <_free_r+0x50>
 8003ed4:	42a3      	cmp	r3, r4
 8003ed6:	d9fa      	bls.n	8003ece <_free_r+0x46>
 8003ed8:	6811      	ldr	r1, [r2, #0]
 8003eda:	1855      	adds	r5, r2, r1
 8003edc:	42a5      	cmp	r5, r4
 8003ede:	d10b      	bne.n	8003ef8 <_free_r+0x70>
 8003ee0:	6824      	ldr	r4, [r4, #0]
 8003ee2:	4421      	add	r1, r4
 8003ee4:	1854      	adds	r4, r2, r1
 8003ee6:	42a3      	cmp	r3, r4
 8003ee8:	6011      	str	r1, [r2, #0]
 8003eea:	d1e0      	bne.n	8003eae <_free_r+0x26>
 8003eec:	681c      	ldr	r4, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	6053      	str	r3, [r2, #4]
 8003ef2:	4421      	add	r1, r4
 8003ef4:	6011      	str	r1, [r2, #0]
 8003ef6:	e7da      	b.n	8003eae <_free_r+0x26>
 8003ef8:	d902      	bls.n	8003f00 <_free_r+0x78>
 8003efa:	230c      	movs	r3, #12
 8003efc:	6003      	str	r3, [r0, #0]
 8003efe:	e7d6      	b.n	8003eae <_free_r+0x26>
 8003f00:	6825      	ldr	r5, [r4, #0]
 8003f02:	1961      	adds	r1, r4, r5
 8003f04:	428b      	cmp	r3, r1
 8003f06:	bf04      	itt	eq
 8003f08:	6819      	ldreq	r1, [r3, #0]
 8003f0a:	685b      	ldreq	r3, [r3, #4]
 8003f0c:	6063      	str	r3, [r4, #4]
 8003f0e:	bf04      	itt	eq
 8003f10:	1949      	addeq	r1, r1, r5
 8003f12:	6021      	streq	r1, [r4, #0]
 8003f14:	6054      	str	r4, [r2, #4]
 8003f16:	e7ca      	b.n	8003eae <_free_r+0x26>
 8003f18:	b003      	add	sp, #12
 8003f1a:	bd30      	pop	{r4, r5, pc}
 8003f1c:	200000f4 	.word	0x200000f4

08003f20 <_read_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4d07      	ldr	r5, [pc, #28]	; (8003f40 <_read_r+0x20>)
 8003f24:	4604      	mov	r4, r0
 8003f26:	4608      	mov	r0, r1
 8003f28:	4611      	mov	r1, r2
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	602a      	str	r2, [r5, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f7fc fef0 	bl	8000d14 <_read>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d102      	bne.n	8003f3e <_read_r+0x1e>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	b103      	cbz	r3, 8003f3e <_read_r+0x1e>
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	200000fc 	.word	0x200000fc

08003f44 <_fstat_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d07      	ldr	r5, [pc, #28]	; (8003f64 <_fstat_r+0x20>)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	602b      	str	r3, [r5, #0]
 8003f52:	f7fc ff08 	bl	8000d66 <_fstat>
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	d102      	bne.n	8003f60 <_fstat_r+0x1c>
 8003f5a:	682b      	ldr	r3, [r5, #0]
 8003f5c:	b103      	cbz	r3, 8003f60 <_fstat_r+0x1c>
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	bd38      	pop	{r3, r4, r5, pc}
 8003f62:	bf00      	nop
 8003f64:	200000fc 	.word	0x200000fc

08003f68 <_isatty_r>:
 8003f68:	b538      	push	{r3, r4, r5, lr}
 8003f6a:	4d06      	ldr	r5, [pc, #24]	; (8003f84 <_isatty_r+0x1c>)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	4604      	mov	r4, r0
 8003f70:	4608      	mov	r0, r1
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	f7fc ff07 	bl	8000d86 <_isatty>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_isatty_r+0x1a>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_isatty_r+0x1a>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	200000fc 	.word	0x200000fc

08003f88 <_init>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr

08003f94 <_fini>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr
