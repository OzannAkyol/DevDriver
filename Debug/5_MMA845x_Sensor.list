
5_MMA845x_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d70  08002d70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d78  08002d78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d7c  08002d7c  00012d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000007c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006dd8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011fb  00000000  00000000  00026e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  00028010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000668  00000000  00000000  000286f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb8f  00000000  00000000  00028d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008801  00000000  00000000  000488ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1b87  00000000  00000000  000510f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00112c77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c48  00000000  00000000  00112cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d40 	.word	0x08002d40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002d40 	.word	0x08002d40

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:




int main(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b093      	sub	sp, #76	; 0x4c
 80004d0:	af12      	add	r7, sp, #72	; 0x48

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fbd5 	bl	8000c80 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 fa43 	bl	8000960 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 facd 	bl	8000a78 <MX_GPIO_Init>

  MX_I2C1_Init();
 80004de:	f000 fa9d 	bl	8000a1c <MX_I2C1_Init>

  retval = MMA845x_Test_Sensor(hi2c1, MMA845x_DEVICE_ADDR);
 80004e2:	4c13      	ldr	r4, [pc, #76]	; (8000530 <main+0x64>)
 80004e4:	231c      	movs	r3, #28
 80004e6:	9311      	str	r3, [sp, #68]	; 0x44
 80004e8:	4668      	mov	r0, sp
 80004ea:	f104 0310 	add.w	r3, r4, #16
 80004ee:	2244      	movs	r2, #68	; 0x44
 80004f0:	4619      	mov	r1, r3
 80004f2:	f002 fc0f 	bl	8002d14 <memcpy>
 80004f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004fa:	f000 f9eb 	bl	80008d4 <MMA845x_Test_Sensor>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <main+0x68>)
 8000502:	6013      	str	r3, [r2, #0]
  Sensor_ID_Response = MMA845x_Read_ID(&hi2c1, MMA845x_DEVICE_ADDR, MMA845x_WHO_AM_I_REG);
 8000504:	220d      	movs	r2, #13
 8000506:	211c      	movs	r1, #28
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <main+0x64>)
 800050a:	f000 fa05 	bl	8000918 <MMA845x_Read_ID>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0x6c>)
 8000514:	701a      	strb	r2, [r3, #0]

  MMA845x_Set_Data_Rate(SET_DATA_RATE_800Hz);
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f956 	bl	80007c8 <MMA845x_Set_Data_Rate>
  MMA845x_Set_Sensor_Power_Mode(SENSOR_NORMAL_POWER_MODE_VAL, SENSOR_NORMAL_POWER_MODE);
 800051c:	2100      	movs	r1, #0
 800051e:	2000      	movs	r0, #0
 8000520:	f000 f884 	bl	800062c <MMA845x_Set_Sensor_Power_Mode>
  MMA845x_Set_Sensor_HP_Cutoff_Frequency(SET_CUTOFF_FREQ_16Hz, SENSOR_LOW_POWER_MODE);
 8000524:	2103      	movs	r1, #3
 8000526:	2000      	movs	r0, #0
 8000528:	f000 f808 	bl	800053c <MMA845x_Set_Sensor_HP_Cutoff_Frequency>



   while (1)
 800052c:	e7fe      	b.n	800052c <main+0x60>
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028
 8000534:	2000007c 	.word	0x2000007c
 8000538:	20000080 	.word	0x20000080

0800053c <MMA845x_Set_Sensor_HP_Cutoff_Frequency>:
	return SENSOR_ERROR;
}



SensorModeTypeDef MMA845x_Set_Sensor_HP_Cutoff_Frequency(unsigned char Sensor_Mode_Value, PowerModeTypeDef Modes){
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af04      	add	r7, sp, #16
 8000542:	4603      	mov	r3, r0
 8000544:	460a      	mov	r2, r1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	4613      	mov	r3, r2
 800054a:	71bb      	strb	r3, [r7, #6]

	uint8_t cutoff_reg_status;
	HAL_StatusTypeDef ret_val;

	if(Sensor_Mode_Value >= MAX_NUM_OF_HP_FILTER_VALUE)
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d901      	bls.n	8000556 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0x1a>
		return SENSOR_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e064      	b.n	8000620 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xe4>

	ret_val = HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR<<1), MMA845x_HP_FILTER_CUTOFF_REG, REG_SIZE, &cutoff_reg_status, 1, 100);
 8000556:	2364      	movs	r3, #100	; 0x64
 8000558:	9302      	str	r3, [sp, #8]
 800055a:	2301      	movs	r3, #1
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	f107 030e 	add.w	r3, r7, #14
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2301      	movs	r3, #1
 8000566:	220f      	movs	r2, #15
 8000568:	2138      	movs	r1, #56	; 0x38
 800056a:	482f      	ldr	r0, [pc, #188]	; (8000628 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xec>)
 800056c:	f001 f8ba 	bl	80016e4 <HAL_I2C_Mem_Read>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]

	if(ret_val != HAL_OK)
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0x42>
		return SENSOR_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	e050      	b.n	8000620 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xe4>

	cutoff_reg_status &= ~(MMA845x_CUTOFF_REG_BIT1_BIT0_MASK);
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	f023 0303 	bic.w	r3, r3, #3
 8000584:	b2db      	uxtb	r3, r3
 8000586:	73bb      	strb	r3, [r7, #14]
	cutoff_reg_status |= Sensor_Mode_Value;
 8000588:	7bba      	ldrb	r2, [r7, #14]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4313      	orrs	r3, r2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	73bb      	strb	r3, [r7, #14]

	if(SENSOR_NORMAL_POWER_MODE == Modes)
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10d      	bne.n	80005b4 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0x78>
		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR<<1), MMA845x_HP_FILTER_CUTOFF_REG, REG_SIZE, &cutoff_reg_status, 1, 100);
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	9302      	str	r3, [sp, #8]
 800059c:	2301      	movs	r3, #1
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	f107 030e 	add.w	r3, r7, #14
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	220f      	movs	r2, #15
 80005aa:	2138      	movs	r1, #56	; 0x38
 80005ac:	481e      	ldr	r0, [pc, #120]	; (8000628 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xec>)
 80005ae:	f000 ff9f 	bl	80014f0 <HAL_I2C_Mem_Write>
 80005b2:	e034      	b.n	800061e <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xe2>
	else if(SENSOR_LOW_NOISE_LOW_POWER_MODE == Modes)
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d10d      	bne.n	80005d6 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0x9a>
		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR<<1), MMA845x_HP_FILTER_CUTOFF_REG, REG_SIZE, &cutoff_reg_status, 1, 100);
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	9302      	str	r3, [sp, #8]
 80005be:	2301      	movs	r3, #1
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	f107 030e 	add.w	r3, r7, #14
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	220f      	movs	r2, #15
 80005cc:	2138      	movs	r1, #56	; 0x38
 80005ce:	4816      	ldr	r0, [pc, #88]	; (8000628 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xec>)
 80005d0:	f000 ff8e 	bl	80014f0 <HAL_I2C_Mem_Write>
 80005d4:	e023      	b.n	800061e <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xe2>
	else if (SENSOR_HIGH_RESOLUTION_MODE == Modes)
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d10d      	bne.n	80005f8 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xbc>
		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR<<1), MMA845x_HP_FILTER_CUTOFF_REG, REG_SIZE, &cutoff_reg_status, 1, 100);
 80005dc:	2364      	movs	r3, #100	; 0x64
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	f107 030e 	add.w	r3, r7, #14
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	220f      	movs	r2, #15
 80005ee:	2138      	movs	r1, #56	; 0x38
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xec>)
 80005f2:	f000 ff7d 	bl	80014f0 <HAL_I2C_Mem_Write>
 80005f6:	e012      	b.n	800061e <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xe2>
	else if (SENSOR_LOW_POWER_MODE == Modes)
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d10d      	bne.n	800061a <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xde>
		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR<<1), MMA845x_HP_FILTER_CUTOFF_REG, REG_SIZE, &cutoff_reg_status, 1, 100);
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	2301      	movs	r3, #1
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	f107 030e 	add.w	r3, r7, #14
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	220f      	movs	r2, #15
 8000610:	2138      	movs	r1, #56	; 0x38
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xec>)
 8000614:	f000 ff6c 	bl	80014f0 <HAL_I2C_Mem_Write>
 8000618:	e001      	b.n	800061e <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xe2>
	else{
		return SENSOR_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e000      	b.n	8000620 <MMA845x_Set_Sensor_HP_Cutoff_Frequency+0xe4>
	}
		return SENSOR_OK;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000028 	.word	0x20000028

0800062c <MMA845x_Set_Sensor_Power_Mode>:


SensorModeTypeDef MMA845x_Set_Sensor_Power_Mode(unsigned char Sensor_Mode_Value, PowerModeTypeDef Modes){
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af04      	add	r7, sp, #16
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	4613      	mov	r3, r2
 800063a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_status;

	Sensor_Mode_Value = Sensor_Mode_Value << 3;
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	71fb      	strb	r3, [r7, #7]

	if(Sensor_Mode_Value >= MAX_NUM_OF_SENSOR_MODE)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b03      	cmp	r3, #3
 8000646:	d901      	bls.n	800064c <MMA845x_Set_Sensor_Power_Mode+0x20>
		return SENSOR_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	e0b7      	b.n	80007bc <MMA845x_Set_Sensor_Power_Mode+0x190>

	if(SENSOR_NORMAL_POWER_MODE == Modes){
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d126      	bne.n	80006a0 <MMA845x_Set_Sensor_Power_Mode+0x74>

		MMA845x_Set_Sensor_State(SENSOR_STANDBY);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f8f6 	bl	8000844 <MMA845x_Set_Sensor_State>

		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL2_REG, REG_SIZE, &reg_status, 1, 100);
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	2301      	movs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f107 030f 	add.w	r3, r7, #15
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	222b      	movs	r2, #43	; 0x2b
 800066a:	2138      	movs	r1, #56	; 0x38
 800066c:	4855      	ldr	r0, [pc, #340]	; (80007c4 <MMA845x_Set_Sensor_Power_Mode+0x198>)
 800066e:	f001 f839 	bl	80016e4 <HAL_I2C_Mem_Read>

		/*DATA_ MASK*/
		reg_status &= ~(MMA845x_CTRL2_REG_BIT3_BIT4_MASK);
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	f023 0318 	bic.w	r3, r3, #24
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73fb      	strb	r3, [r7, #15]

		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL2_REG, REG_SIZE, &reg_status, 1, 100);
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	9302      	str	r3, [sp, #8]
 8000680:	2301      	movs	r3, #1
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	f107 030f 	add.w	r3, r7, #15
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	222b      	movs	r2, #43	; 0x2b
 800068e:	2138      	movs	r1, #56	; 0x38
 8000690:	484c      	ldr	r0, [pc, #304]	; (80007c4 <MMA845x_Set_Sensor_Power_Mode+0x198>)
 8000692:	f000 ff2d 	bl	80014f0 <HAL_I2C_Mem_Write>

		MMA845x_Set_Sensor_State(SENSOR_ACTIVE);
 8000696:	2001      	movs	r0, #1
 8000698:	f000 f8d4 	bl	8000844 <MMA845x_Set_Sensor_State>

		return SENSOR_OK;
 800069c:	2300      	movs	r3, #0
 800069e:	e08d      	b.n	80007bc <MMA845x_Set_Sensor_Power_Mode+0x190>

	}else if(SENSOR_LOW_NOISE_LOW_POWER_MODE == Modes){
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d12b      	bne.n	80006fe <MMA845x_Set_Sensor_Power_Mode+0xd2>

		MMA845x_Set_Sensor_State(SENSOR_STANDBY);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8cc 	bl	8000844 <MMA845x_Set_Sensor_State>

		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL2_REG, REG_SIZE, &reg_status, 1, 100);
 80006ac:	2364      	movs	r3, #100	; 0x64
 80006ae:	9302      	str	r3, [sp, #8]
 80006b0:	2301      	movs	r3, #1
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	f107 030f 	add.w	r3, r7, #15
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	222b      	movs	r2, #43	; 0x2b
 80006be:	2138      	movs	r1, #56	; 0x38
 80006c0:	4840      	ldr	r0, [pc, #256]	; (80007c4 <MMA845x_Set_Sensor_Power_Mode+0x198>)
 80006c2:	f001 f80f 	bl	80016e4 <HAL_I2C_Mem_Read>

		/*DATA_ MASK*/
		reg_status &= ~(MMA845x_CTRL2_REG_BIT3_BIT4_MASK);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f023 0318 	bic.w	r3, r3, #24
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	73fb      	strb	r3, [r7, #15]
		reg_status |=	Sensor_Mode_Value;
 80006d0:	7bfa      	ldrb	r2, [r7, #15]
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	73fb      	strb	r3, [r7, #15]

		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL2_REG, REG_SIZE, &reg_status, 1, 100);
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	9302      	str	r3, [sp, #8]
 80006de:	2301      	movs	r3, #1
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	f107 030f 	add.w	r3, r7, #15
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2301      	movs	r3, #1
 80006ea:	222b      	movs	r2, #43	; 0x2b
 80006ec:	2138      	movs	r1, #56	; 0x38
 80006ee:	4835      	ldr	r0, [pc, #212]	; (80007c4 <MMA845x_Set_Sensor_Power_Mode+0x198>)
 80006f0:	f000 fefe 	bl	80014f0 <HAL_I2C_Mem_Write>

		MMA845x_Set_Sensor_State(SENSOR_ACTIVE);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 f8a5 	bl	8000844 <MMA845x_Set_Sensor_State>

		return SENSOR_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e05e      	b.n	80007bc <MMA845x_Set_Sensor_Power_Mode+0x190>

	}else if(SENSOR_HIGH_RESOLUTION_MODE == Modes){
 80006fe:	79bb      	ldrb	r3, [r7, #6]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d12b      	bne.n	800075c <MMA845x_Set_Sensor_Power_Mode+0x130>

		MMA845x_Set_Sensor_State(SENSOR_STANDBY);
 8000704:	2000      	movs	r0, #0
 8000706:	f000 f89d 	bl	8000844 <MMA845x_Set_Sensor_State>

		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL2_REG, REG_SIZE, &reg_status, 1, 100);
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	9302      	str	r3, [sp, #8]
 800070e:	2301      	movs	r3, #1
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	f107 030f 	add.w	r3, r7, #15
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	222b      	movs	r2, #43	; 0x2b
 800071c:	2138      	movs	r1, #56	; 0x38
 800071e:	4829      	ldr	r0, [pc, #164]	; (80007c4 <MMA845x_Set_Sensor_Power_Mode+0x198>)
 8000720:	f000 ffe0 	bl	80016e4 <HAL_I2C_Mem_Read>

		/*DATA_ MASK*/
		reg_status &= ~(MMA845x_CTRL2_REG_BIT3_BIT4_MASK);
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	f023 0318 	bic.w	r3, r3, #24
 800072a:	b2db      	uxtb	r3, r3
 800072c:	73fb      	strb	r3, [r7, #15]

		reg_status |=	Sensor_Mode_Value;
 800072e:	7bfa      	ldrb	r2, [r7, #15]
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4313      	orrs	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	73fb      	strb	r3, [r7, #15]

		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL2_REG, REG_SIZE, &reg_status, 1, 100);
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	f107 030f 	add.w	r3, r7, #15
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	222b      	movs	r2, #43	; 0x2b
 800074a:	2138      	movs	r1, #56	; 0x38
 800074c:	481d      	ldr	r0, [pc, #116]	; (80007c4 <MMA845x_Set_Sensor_Power_Mode+0x198>)
 800074e:	f000 fecf 	bl	80014f0 <HAL_I2C_Mem_Write>

		MMA845x_Set_Sensor_State(SENSOR_ACTIVE);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 f876 	bl	8000844 <MMA845x_Set_Sensor_State>

		return SENSOR_OK;
 8000758:	2300      	movs	r3, #0
 800075a:	e02f      	b.n	80007bc <MMA845x_Set_Sensor_Power_Mode+0x190>

	}else if(SENSOR_LOW_POWER_MODE == Modes){
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d12b      	bne.n	80007ba <MMA845x_Set_Sensor_Power_Mode+0x18e>

		MMA845x_Set_Sensor_State(SENSOR_STANDBY);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 f86e 	bl	8000844 <MMA845x_Set_Sensor_State>

		HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL2_REG, REG_SIZE, &reg_status, 1, 100);
 8000768:	2364      	movs	r3, #100	; 0x64
 800076a:	9302      	str	r3, [sp, #8]
 800076c:	2301      	movs	r3, #1
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	f107 030f 	add.w	r3, r7, #15
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	222b      	movs	r2, #43	; 0x2b
 800077a:	2138      	movs	r1, #56	; 0x38
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MMA845x_Set_Sensor_Power_Mode+0x198>)
 800077e:	f000 ffb1 	bl	80016e4 <HAL_I2C_Mem_Read>

		/*DATA_ MASK*/
		reg_status &= ~(MMA845x_CTRL2_REG_BIT3_BIT4_MASK);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	f023 0318 	bic.w	r3, r3, #24
 8000788:	b2db      	uxtb	r3, r3
 800078a:	73fb      	strb	r3, [r7, #15]

		reg_status |=	Sensor_Mode_Value;
 800078c:	7bfa      	ldrb	r2, [r7, #15]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4313      	orrs	r3, r2
 8000792:	b2db      	uxtb	r3, r3
 8000794:	73fb      	strb	r3, [r7, #15]

		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL2_REG, REG_SIZE, &reg_status, 1, 100);
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	9302      	str	r3, [sp, #8]
 800079a:	2301      	movs	r3, #1
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	f107 030f 	add.w	r3, r7, #15
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2301      	movs	r3, #1
 80007a6:	222b      	movs	r2, #43	; 0x2b
 80007a8:	2138      	movs	r1, #56	; 0x38
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MMA845x_Set_Sensor_Power_Mode+0x198>)
 80007ac:	f000 fea0 	bl	80014f0 <HAL_I2C_Mem_Write>

		MMA845x_Set_Sensor_State(SENSOR_ACTIVE);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f847 	bl	8000844 <MMA845x_Set_Sensor_State>

		return SENSOR_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <MMA845x_Set_Sensor_Power_Mode+0x190>

	}else
		return SENSOR_ERROR;
 80007ba:	2301      	movs	r3, #1


}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000028 	.word	0x20000028

080007c8 <MMA845x_Set_Data_Rate>:



//HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL1_REG, REG_SIZE, &reg_status, 1, 100); ????????????????????????????

SensorModeTypeDef MMA845x_Set_Data_Rate(unsigned char Data_Rate_Value){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]

	if(Data_Rate_Value > MAX_NUM_OF_SCALE_VALUE)
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b08      	cmp	r3, #8
 80007d6:	d901      	bls.n	80007dc <MMA845x_Set_Data_Rate+0x14>
		return SENSOR_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	e02d      	b.n	8000838 <MMA845x_Set_Data_Rate+0x70>

	uint8_t reg_status;

	MMA845x_Set_Sensor_State(SENSOR_STANDBY);
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 f831 	bl	8000844 <MMA845x_Set_Sensor_State>

	Data_Rate_Value = Data_Rate_Value << 3;																				  /* To write this Control Register's Bit5, Bit4, Bit3 */
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL1_REG, REG_SIZE, &reg_status, 1, 100); /* To Read Control Register Status  */
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	f107 030f 	add.w	r3, r7, #15
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	222a      	movs	r2, #42	; 0x2a
 80007fa:	2138      	movs	r1, #56	; 0x38
 80007fc:	4810      	ldr	r0, [pc, #64]	; (8000840 <MMA845x_Set_Data_Rate+0x78>)
 80007fe:	f000 ff71 	bl	80016e4 <HAL_I2C_Mem_Read>

	reg_status &= ~(DR_MASK);																			  /* Clear the Control Register's Bit5, Bit4, Bit3 */
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]

	reg_status |= Data_Rate_Value;																		  /*Set Data Rate */
 800080c:	7bfa      	ldrb	r2, [r7, #15]
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4313      	orrs	r3, r2
 8000812:	b2db      	uxtb	r3, r3
 8000814:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL1_REG, REG_SIZE, &reg_status, 1, 100);
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	9302      	str	r3, [sp, #8]
 800081a:	2301      	movs	r3, #1
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	f107 030f 	add.w	r3, r7, #15
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2301      	movs	r3, #1
 8000826:	222a      	movs	r2, #42	; 0x2a
 8000828:	2138      	movs	r1, #56	; 0x38
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MMA845x_Set_Data_Rate+0x78>)
 800082c:	f000 fe60 	bl	80014f0 <HAL_I2C_Mem_Write>

	MMA845x_Set_Sensor_State(SENSOR_ACTIVE);
 8000830:	2001      	movs	r0, #1
 8000832:	f000 f807 	bl	8000844 <MMA845x_Set_Sensor_State>

	return SENSOR_OK;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000028 	.word	0x20000028

08000844 <MMA845x_Set_Sensor_State>:
		return SENSOR_OK;


}

SensorModeTypeDef MMA845x_Set_Sensor_State(SensorStates states){
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af04      	add	r7, sp, #16
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_status;
	HAL_StatusTypeDef retval;
	retval = HAL_I2C_Mem_Read(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL1_REG, REG_SIZE, &reg_status, 1, 100);
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	9302      	str	r3, [sp, #8]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	f107 030e 	add.w	r3, r7, #14
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2301      	movs	r3, #1
 800085e:	222a      	movs	r2, #42	; 0x2a
 8000860:	2138      	movs	r1, #56	; 0x38
 8000862:	481b      	ldr	r0, [pc, #108]	; (80008d0 <MMA845x_Set_Sensor_State+0x8c>)
 8000864:	f000 ff3e 	bl	80016e4 <HAL_I2C_Mem_Read>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

	if(HAL_ERROR == retval)
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d101      	bne.n	8000876 <MMA845x_Set_Sensor_State+0x32>
		return SENSOR_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e028      	b.n	80008c8 <MMA845x_Set_Sensor_State+0x84>

	if(SENSOR_STANDBY == states ){
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d110      	bne.n	800089e <MMA845x_Set_Sensor_State+0x5a>
		reg_status &= ~(MMA845x_ACTIVE_MASK_BIT);
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL1_REG, REG_SIZE, &reg_status, 1, 100);
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	2301      	movs	r3, #1
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	f107 030e 	add.w	r3, r7, #14
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2301      	movs	r3, #1
 8000890:	222a      	movs	r2, #42	; 0x2a
 8000892:	2138      	movs	r1, #56	; 0x38
 8000894:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MMA845x_Set_Sensor_State+0x8c>)
 8000896:	f000 fe2b 	bl	80014f0 <HAL_I2C_Mem_Write>
		return SENSOR_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	e014      	b.n	80008c8 <MMA845x_Set_Sensor_State+0x84>
	}else if(SENSOR_ACTIVE == states){
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d110      	bne.n	80008c6 <MMA845x_Set_Sensor_State+0x82>
		reg_status |= (MMA845x_ACTIVE_MASK_BIT);
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&hi2c1, (MMA845x_DEVICE_ADDR << 1), MMA845x_CTRL1_REG, REG_SIZE, &reg_status, 1 , 100);
 80008a8:	2364      	movs	r3, #100	; 0x64
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	2301      	movs	r3, #1
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	f107 030e 	add.w	r3, r7, #14
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	222a      	movs	r2, #42	; 0x2a
 80008ba:	2138      	movs	r1, #56	; 0x38
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MMA845x_Set_Sensor_State+0x8c>)
 80008be:	f000 fe17 	bl	80014f0 <HAL_I2C_Mem_Write>
		return SENSOR_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <MMA845x_Set_Sensor_State+0x84>
	}
	return SENSOR_ERROR;
 80008c6:	2301      	movs	r3, #1

}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000028 	.word	0x20000028

080008d4 <MMA845x_Test_Sensor>:

int MMA845x_Test_Sensor(I2C_HandleTypeDef hi2c, uint8_t Device_Addres){
 80008d4:	b084      	sub	sp, #16
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	f107 0c10 	add.w	ip, r7, #16
 80008e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_StatusTypeDef status;

	status = HAL_I2C_IsDeviceReady(&hi2c, (Device_Addres << 1), 4, 100);
 80008e4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	b299      	uxth	r1, r3
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	2204      	movs	r2, #4
 80008f2:	f107 0010 	add.w	r0, r7, #16
 80008f6:	f001 f91b 	bl	8001b30 <HAL_I2C_IsDeviceReady>
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	if(status == HAL_OK)
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d101      	bne.n	8000908 <MMA845x_Test_Sensor+0x34>
		return 1;
 8000904:	2301      	movs	r3, #1
 8000906:	e000      	b.n	800090a <MMA845x_Test_Sensor+0x36>
	else
		return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000914:	b004      	add	sp, #16
 8000916:	4770      	bx	lr

08000918 <MMA845x_Read_ID>:

uint8_t MMA845x_Read_ID(I2C_HandleTypeDef* hi2c, uint8_t Device_Addres, uint8_t RegAddress){
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af04      	add	r7, sp, #16
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
 8000924:	4613      	mov	r3, r2
 8000926:	70bb      	strb	r3, [r7, #2]

	uint8_t RxBuffer[1];
	HAL_I2C_Mem_Read(hi2c, (Device_Addres << 1), RegAddress, REG_SIZE, RxBuffer, 1, 100);
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	b29b      	uxth	r3, r3
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	b299      	uxth	r1, r3
 8000930:	78bb      	ldrb	r3, [r7, #2]
 8000932:	b29a      	uxth	r2, r3
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	2301      	movs	r3, #1
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 fecd 	bl	80016e4 <HAL_I2C_Mem_Read>

	if(0x2A == RxBuffer[0])
 800094a:	7b3b      	ldrb	r3, [r7, #12]
 800094c:	2b2a      	cmp	r3, #42	; 0x2a
 800094e:	d101      	bne.n	8000954 <MMA845x_Read_ID+0x3c>
		return *RxBuffer;
 8000950:	7b3b      	ldrb	r3, [r7, #12]
 8000952:	e000      	b.n	8000956 <MMA845x_Read_ID+0x3e>
	else
		return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	2230      	movs	r2, #48	; 0x30
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f002 f9de 	bl	8002d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <SystemClock_Config+0xb4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <SystemClock_Config+0xb4>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0xb4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <SystemClock_Config+0xb8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <SystemClock_Config+0xb8>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <SystemClock_Config+0xb8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c4:	2310      	movs	r3, #16
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fd37 	bl	8002444 <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009dc:	f000 f874 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e0:	230f      	movs	r3, #15
 80009e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 ff9a 	bl	8002934 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a06:	f000 f85f 	bl	8000ac8 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3750      	adds	r7, #80	; 0x50
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <MX_I2C1_Init+0x54>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_I2C1_Init+0x58>)
 8000a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_I2C1_Init+0x50>)
 8000a5a:	f000 fc05 	bl	8001268 <HAL_I2C_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a64:	f000 f830 	bl	8000ac8 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000028 	.word	0x20000028
 8000a70:	40005400 	.word	0x40005400
 8000a74:	000186a0 	.word	0x000186a0

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_GPIO_Init+0x4c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <MX_GPIO_Init+0x4c>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_GPIO_Init+0x4c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_GPIO_Init+0x4c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <MX_GPIO_Init+0x4c>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_GPIO_Init+0x4c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_I2C_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12b      	bne.n	8000b9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b62:	23c0      	movs	r3, #192	; 0xc0
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b66:	2312      	movs	r3, #18
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b72:	2304      	movs	r3, #4
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <HAL_I2C_MspInit+0x8c>)
 8000b7e:	f000 f9d7 	bl	8000f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
 }
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */

}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 f890 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f002 f837 	bl	8002ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fc35 	bl	80004cc <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c70:	08002d80 	.word	0x08002d80
  ldr r2, =_sbss
 8000c74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c78:	20000088 	.word	0x20000088

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f90d 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff ff0e 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f917 	bl	8000f16 <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f8ed 	bl	8000ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000004 	.word	0x20000004

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000084 	.word	0x20000084

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000084 	.word	0x20000084

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff ff8e 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff47 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff5c 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff8e 	bl	8000e1c <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffb0 	bl	8000e84 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e16b      	b.n	8001224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 815a 	bne.w	800121e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d017      	beq.n	8001020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80b4 	beq.w	800121e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b60      	ldr	r3, [pc, #384]	; (800123c <HAL_GPIO_Init+0x30c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a5f      	ldr	r2, [pc, #380]	; (800123c <HAL_GPIO_Init+0x30c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b5d      	ldr	r3, [pc, #372]	; (800123c <HAL_GPIO_Init+0x30c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a5b      	ldr	r2, [pc, #364]	; (8001240 <HAL_GPIO_Init+0x310>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x314>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <HAL_GPIO_Init+0x226>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a51      	ldr	r2, [pc, #324]	; (8001248 <HAL_GPIO_Init+0x318>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x222>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a50      	ldr	r2, [pc, #320]	; (800124c <HAL_GPIO_Init+0x31c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x21e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x320>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x21a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x324>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x216>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x328>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x212>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x32c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x20e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x330>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x20a>
 8001136:	2307      	movs	r3, #7
 8001138:	e00e      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113a:	2308      	movs	r3, #8
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113e:	2306      	movs	r3, #6
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <HAL_GPIO_Init+0x310>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_GPIO_Init+0x334>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a32      	ldr	r2, [pc, #200]	; (8001264 <HAL_GPIO_Init+0x334>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <HAL_GPIO_Init+0x334>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae90 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021400 	.word	0x40021400
 800125c:	40021800 	.word	0x40021800
 8001260:	40021c00 	.word	0x40021c00
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e12b      	b.n	80014d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d106      	bne.n	8001294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fc48 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2224      	movs	r2, #36	; 0x24
 8001298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012cc:	f001 fcea 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80012d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a81      	ldr	r2, [pc, #516]	; (80014dc <HAL_I2C_Init+0x274>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d807      	bhi.n	80012ec <HAL_I2C_Init+0x84>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4a80      	ldr	r2, [pc, #512]	; (80014e0 <HAL_I2C_Init+0x278>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	bf94      	ite	ls
 80012e4:	2301      	movls	r3, #1
 80012e6:	2300      	movhi	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	e006      	b.n	80012fa <HAL_I2C_Init+0x92>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4a7d      	ldr	r2, [pc, #500]	; (80014e4 <HAL_I2C_Init+0x27c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	bf94      	ite	ls
 80012f4:	2301      	movls	r3, #1
 80012f6:	2300      	movhi	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0e7      	b.n	80014d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4a78      	ldr	r2, [pc, #480]	; (80014e8 <HAL_I2C_Init+0x280>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9b      	lsrs	r3, r3, #18
 800130c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	430a      	orrs	r2, r1
 8001320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a6a      	ldr	r2, [pc, #424]	; (80014dc <HAL_I2C_Init+0x274>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d802      	bhi.n	800133c <HAL_I2C_Init+0xd4>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3301      	adds	r3, #1
 800133a:	e009      	b.n	8001350 <HAL_I2C_Init+0xe8>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	4a69      	ldr	r2, [pc, #420]	; (80014ec <HAL_I2C_Init+0x284>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	099b      	lsrs	r3, r3, #6
 800134e:	3301      	adds	r3, #1
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	430b      	orrs	r3, r1
 8001356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	495c      	ldr	r1, [pc, #368]	; (80014dc <HAL_I2C_Init+0x274>)
 800136c:	428b      	cmp	r3, r1
 800136e:	d819      	bhi.n	80013a4 <HAL_I2C_Init+0x13c>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e59      	subs	r1, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fbb1 f3f3 	udiv	r3, r1, r3
 800137e:	1c59      	adds	r1, r3, #1
 8001380:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001384:	400b      	ands	r3, r1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00a      	beq.n	80013a0 <HAL_I2C_Init+0x138>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1e59      	subs	r1, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fbb1 f3f3 	udiv	r3, r1, r3
 8001398:	3301      	adds	r3, #1
 800139a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800139e:	e051      	b.n	8001444 <HAL_I2C_Init+0x1dc>
 80013a0:	2304      	movs	r3, #4
 80013a2:	e04f      	b.n	8001444 <HAL_I2C_Init+0x1dc>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d111      	bne.n	80013d0 <HAL_I2C_Init+0x168>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1e58      	subs	r0, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6859      	ldr	r1, [r3, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	440b      	add	r3, r1
 80013ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf0c      	ite	eq
 80013c8:	2301      	moveq	r3, #1
 80013ca:	2300      	movne	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	e012      	b.n	80013f6 <HAL_I2C_Init+0x18e>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1e58      	subs	r0, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	0099      	lsls	r1, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e6:	3301      	adds	r3, #1
 80013e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_Init+0x196>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e022      	b.n	8001444 <HAL_I2C_Init+0x1dc>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10e      	bne.n	8001424 <HAL_I2C_Init+0x1bc>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1e58      	subs	r0, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6859      	ldr	r1, [r3, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	440b      	add	r3, r1
 8001414:	fbb0 f3f3 	udiv	r3, r0, r3
 8001418:	3301      	adds	r3, #1
 800141a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001422:	e00f      	b.n	8001444 <HAL_I2C_Init+0x1dc>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e58      	subs	r0, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	0099      	lsls	r1, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	fbb0 f3f3 	udiv	r3, r0, r3
 800143a:	3301      	adds	r3, #1
 800143c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	6809      	ldr	r1, [r1, #0]
 8001448:	4313      	orrs	r3, r2
 800144a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6911      	ldr	r1, [r2, #16]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68d2      	ldr	r2, [r2, #12]
 800147e:	4311      	orrs	r1, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	430b      	orrs	r3, r1
 8001486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	000186a0 	.word	0x000186a0
 80014e0:	001e847f 	.word	0x001e847f
 80014e4:	003d08ff 	.word	0x003d08ff
 80014e8:	431bde83 	.word	0x431bde83
 80014ec:	10624dd3 	.word	0x10624dd3

080014f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	817b      	strh	r3, [r7, #10]
 8001502:	460b      	mov	r3, r1
 8001504:	813b      	strh	r3, [r7, #8]
 8001506:	4613      	mov	r3, r2
 8001508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800150a:	f7ff fc1f 	bl	8000d4c <HAL_GetTick>
 800150e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b20      	cmp	r3, #32
 800151a:	f040 80d9 	bne.w	80016d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2319      	movs	r3, #25
 8001524:	2201      	movs	r2, #1
 8001526:	496d      	ldr	r1, [pc, #436]	; (80016dc <HAL_I2C_Mem_Write+0x1ec>)
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 fdad 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001534:	2302      	movs	r3, #2
 8001536:	e0cc      	b.n	80016d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_I2C_Mem_Write+0x56>
 8001542:	2302      	movs	r3, #2
 8001544:	e0c5      	b.n	80016d2 <HAL_I2C_Mem_Write+0x1e2>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b01      	cmp	r3, #1
 800155a:	d007      	beq.n	800156c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800157a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2221      	movs	r2, #33	; 0x21
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2240      	movs	r2, #64	; 0x40
 8001588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a3a      	ldr	r2, [r7, #32]
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800159c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a4d      	ldr	r2, [pc, #308]	; (80016e0 <HAL_I2C_Mem_Write+0x1f0>)
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015ae:	88f8      	ldrh	r0, [r7, #6]
 80015b0:	893a      	ldrh	r2, [r7, #8]
 80015b2:	8979      	ldrh	r1, [r7, #10]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4603      	mov	r3, r0
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 fbe4 	bl	8001d8c <I2C_RequestMemoryWrite>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d052      	beq.n	8001670 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e081      	b.n	80016d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 fe2e 	bl	8002234 <I2C_WaitOnTXEFlagUntilTimeout>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00d      	beq.n	80015fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d107      	bne.n	80015f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06b      	b.n	80016d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001614:	3b01      	subs	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001620:	b29b      	uxth	r3, r3
 8001622:	3b01      	subs	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b04      	cmp	r3, #4
 8001636:	d11b      	bne.n	8001670 <HAL_I2C_Mem_Write+0x180>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163c:	2b00      	cmp	r3, #0
 800163e:	d017      	beq.n	8001670 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001666:	b29b      	uxth	r3, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1aa      	bne.n	80015ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 fe1a 	bl	80022b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00d      	beq.n	80016a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	2b04      	cmp	r3, #4
 800168e:	d107      	bne.n	80016a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e016      	b.n	80016d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2220      	movs	r2, #32
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
  }
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	00100002 	.word	0x00100002
 80016e0:	ffff0000 	.word	0xffff0000

080016e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	4608      	mov	r0, r1
 80016ee:	4611      	mov	r1, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4603      	mov	r3, r0
 80016f4:	817b      	strh	r3, [r7, #10]
 80016f6:	460b      	mov	r3, r1
 80016f8:	813b      	strh	r3, [r7, #8]
 80016fa:	4613      	mov	r3, r2
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016fe:	f7ff fb25 	bl	8000d4c <HAL_GetTick>
 8001702:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b20      	cmp	r3, #32
 800170e:	f040 8208 	bne.w	8001b22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2319      	movs	r3, #25
 8001718:	2201      	movs	r2, #1
 800171a:	497b      	ldr	r1, [pc, #492]	; (8001908 <HAL_I2C_Mem_Read+0x224>)
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fcb3 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001728:	2302      	movs	r3, #2
 800172a:	e1fb      	b.n	8001b24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_I2C_Mem_Read+0x56>
 8001736:	2302      	movs	r3, #2
 8001738:	e1f4      	b.n	8001b24 <HAL_I2C_Mem_Read+0x440>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d007      	beq.n	8001760 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2222      	movs	r2, #34	; 0x22
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2240      	movs	r2, #64	; 0x40
 800177c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4a5b      	ldr	r2, [pc, #364]	; (800190c <HAL_I2C_Mem_Read+0x228>)
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017a2:	88f8      	ldrh	r0, [r7, #6]
 80017a4:	893a      	ldrh	r2, [r7, #8]
 80017a6:	8979      	ldrh	r1, [r7, #10]
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	4603      	mov	r3, r0
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 fb80 	bl	8001eb8 <I2C_RequestMemoryRead>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e1b0      	b.n	8001b24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d113      	bne.n	80017f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	623b      	str	r3, [r7, #32]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e184      	b.n	8001afc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d11b      	bne.n	8001832 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e164      	b.n	8001afc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001836:	2b02      	cmp	r3, #2
 8001838:	d11b      	bne.n	8001872 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001848:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	e144      	b.n	8001afc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001888:	e138      	b.n	8001afc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	2b03      	cmp	r3, #3
 8001890:	f200 80f1 	bhi.w	8001a76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001898:	2b01      	cmp	r3, #1
 800189a:	d123      	bne.n	80018e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fd49 	bl	8002338 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e139      	b.n	8001b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018e2:	e10b      	b.n	8001afc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d14e      	bne.n	800198a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f2:	2200      	movs	r2, #0
 80018f4:	4906      	ldr	r1, [pc, #24]	; (8001910 <HAL_I2C_Mem_Read+0x22c>)
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 fbc6 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e10e      	b.n	8001b24 <HAL_I2C_Mem_Read+0x440>
 8001906:	bf00      	nop
 8001908:	00100002 	.word	0x00100002
 800190c:	ffff0000 	.word	0xffff0000
 8001910:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001988:	e0b8      	b.n	8001afc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001990:	2200      	movs	r2, #0
 8001992:	4966      	ldr	r1, [pc, #408]	; (8001b2c <HAL_I2C_Mem_Read+0x448>)
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fb77 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0bf      	b.n	8001b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ec:	2200      	movs	r2, #0
 80019ee:	494f      	ldr	r1, [pc, #316]	; (8001b2c <HAL_I2C_Mem_Read+0x448>)
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fb49 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e091      	b.n	8001b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a74:	e042      	b.n	8001afc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 fc5c 	bl	8002338 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e04c      	b.n	8001b24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d118      	bne.n	8001afc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f47f aec2 	bne.w	800188a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
  }
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	00010004 	.word	0x00010004

08001b30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff f904 	bl	8000d4c <HAL_GetTick>
 8001b44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	f040 8111 	bne.w	8001d7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2319      	movs	r3, #25
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4988      	ldr	r1, [pc, #544]	; (8001d84 <HAL_I2C_IsDeviceReady+0x254>)
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fa90 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e104      	b.n	8001d7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_I2C_IsDeviceReady+0x50>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e0fd      	b.n	8001d7c <HAL_I2C_IsDeviceReady+0x24c>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d007      	beq.n	8001ba6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0201 	orr.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2224      	movs	r2, #36	; 0x24
 8001bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4a70      	ldr	r2, [pc, #448]	; (8001d88 <HAL_I2C_IsDeviceReady+0x258>)
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fa4e 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00d      	beq.n	8001c0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c00:	d103      	bne.n	8001c0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0b6      	b.n	8001d7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c0e:	897b      	ldrh	r3, [r7, #10]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff f895 	bl	8000d4c <HAL_GetTick>
 8001c22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c52:	e025      	b.n	8001ca0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c54:	f7ff f87a 	bl	8000d4c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d302      	bcc.n	8001c6a <HAL_I2C_IsDeviceReady+0x13a>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	22a0      	movs	r2, #160	; 0xa0
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2ba0      	cmp	r3, #160	; 0xa0
 8001caa:	d005      	beq.n	8001cb8 <HAL_I2C_IsDeviceReady+0x188>
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_I2C_IsDeviceReady+0x188>
 8001cb2:	7dbb      	ldrb	r3, [r7, #22]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0cd      	beq.n	8001c54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d129      	bne.n	8001d22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2319      	movs	r3, #25
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4921      	ldr	r1, [pc, #132]	; (8001d84 <HAL_I2C_IsDeviceReady+0x254>)
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f9c2 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e036      	b.n	8001d7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e02c      	b.n	8001d7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2319      	movs	r3, #25
 8001d42:	2201      	movs	r2, #1
 8001d44:	490f      	ldr	r1, [pc, #60]	; (8001d84 <HAL_I2C_IsDeviceReady+0x254>)
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f99e 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e012      	b.n	8001d7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f4ff af32 	bcc.w	8001bca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	00100002 	.word	0x00100002
 8001d88:	ffff0000 	.word	0xffff0000

08001d8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	817b      	strh	r3, [r7, #10]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	813b      	strh	r3, [r7, #8]
 8001da2:	4613      	mov	r3, r2
 8001da4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 f960 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ddc:	d103      	bne.n	8001de6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e05f      	b.n	8001eaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	492d      	ldr	r1, [pc, #180]	; (8001eb4 <I2C_RequestMemoryWrite+0x128>)
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f998 	bl	8002136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e04c      	b.n	8001eaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	6a39      	ldr	r1, [r7, #32]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fa02 	bl	8002234 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00d      	beq.n	8001e52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d107      	bne.n	8001e4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e02b      	b.n	8001eaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e58:	893b      	ldrh	r3, [r7, #8]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	e021      	b.n	8001ea8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e64:	893b      	ldrh	r3, [r7, #8]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f9dc 	bl	8002234 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00d      	beq.n	8001e9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d107      	bne.n	8001e9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e005      	b.n	8001eaa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e9e:	893b      	ldrh	r3, [r7, #8]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	00010002 	.word	0x00010002

08001eb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	817b      	strh	r3, [r7, #10]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	813b      	strh	r3, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f8c2 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00d      	beq.n	8001f26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f18:	d103      	bne.n	8001f22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0aa      	b.n	800207c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f26:	897b      	ldrh	r3, [r7, #10]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	6a3a      	ldr	r2, [r7, #32]
 8001f3a:	4952      	ldr	r1, [pc, #328]	; (8002084 <I2C_RequestMemoryRead+0x1cc>)
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f8fa 	bl	8002136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e097      	b.n	800207c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f64:	6a39      	ldr	r1, [r7, #32]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f964 	bl	8002234 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d107      	bne.n	8001f8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e076      	b.n	800207c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f94:	893b      	ldrh	r3, [r7, #8]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	e021      	b.n	8001fe4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fa0:	893b      	ldrh	r3, [r7, #8]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	6a39      	ldr	r1, [r7, #32]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f93e 	bl	8002234 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00d      	beq.n	8001fda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d107      	bne.n	8001fd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e050      	b.n	800207c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fda:	893b      	ldrh	r3, [r7, #8]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe6:	6a39      	ldr	r1, [r7, #32]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f923 	bl	8002234 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00d      	beq.n	8002010 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d107      	bne.n	800200c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e035      	b.n	800207c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800201e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	2200      	movs	r2, #0
 8002028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f82b 	bl	8002088 <I2C_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002046:	d103      	bne.n	8002050 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e013      	b.n	800207c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002054:	897b      	ldrh	r3, [r7, #10]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	b2da      	uxtb	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	6a3a      	ldr	r2, [r7, #32]
 8002068:	4906      	ldr	r1, [pc, #24]	; (8002084 <I2C_RequestMemoryRead+0x1cc>)
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f863 	bl	8002136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	00010002 	.word	0x00010002

08002088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002098:	e025      	b.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d021      	beq.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a2:	f7fe fe53 	bl	8000d4c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d302      	bcc.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d116      	bne.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f043 0220 	orr.w	r2, r3, #32
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e023      	b.n	800212e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10d      	bne.n	800210c <I2C_WaitOnFlagUntilTimeout+0x84>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	e00c      	b.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4013      	ands	r3, r2
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf0c      	ite	eq
 800211e:	2301      	moveq	r3, #1
 8002120:	2300      	movne	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	429a      	cmp	r2, r3
 800212a:	d0b6      	beq.n	800209a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002144:	e051      	b.n	80021ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002154:	d123      	bne.n	800219e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002164:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800216e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f043 0204 	orr.w	r2, r3, #4
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e046      	b.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d021      	beq.n	80021ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7fe fdd1 	bl	8000d4c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d302      	bcc.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d116      	bne.n	80021ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f043 0220 	orr.w	r2, r3, #32
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e020      	b.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d10c      	bne.n	800220e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4013      	ands	r3, r2
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	e00b      	b.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	43da      	mvns	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4013      	ands	r3, r2
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d18d      	bne.n	8002146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002240:	e02d      	b.n	800229e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f8ce 	bl	80023e4 <I2C_IsAcknowledgeFailed>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e02d      	b.n	80022ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d021      	beq.n	800229e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225a:	f7fe fd77 	bl	8000d4c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	429a      	cmp	r2, r3
 8002268:	d302      	bcc.n	8002270 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d116      	bne.n	800229e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f043 0220 	orr.w	r2, r3, #32
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e007      	b.n	80022ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d1ca      	bne.n	8002242 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022c2:	e02d      	b.n	8002320 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f88d 	bl	80023e4 <I2C_IsAcknowledgeFailed>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e02d      	b.n	8002330 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022da:	d021      	beq.n	8002320 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022dc:	f7fe fd36 	bl	8000d4c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d302      	bcc.n	80022f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d116      	bne.n	8002320 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e007      	b.n	8002330 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b04      	cmp	r3, #4
 800232c:	d1ca      	bne.n	80022c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002344:	e042      	b.n	80023cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b10      	cmp	r3, #16
 8002352:	d119      	bne.n	8002388 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0210 	mvn.w	r2, #16
 800235c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e029      	b.n	80023dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002388:	f7fe fce0 	bl	8000d4c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	429a      	cmp	r2, r3
 8002396:	d302      	bcc.n	800239e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e007      	b.n	80023dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d6:	2b40      	cmp	r3, #64	; 0x40
 80023d8:	d1b5      	bne.n	8002346 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fa:	d11b      	bne.n	8002434 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002404:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f043 0204 	orr.w	r2, r3, #4
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e267      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d075      	beq.n	800254e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002462:	4b88      	ldr	r3, [pc, #544]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d00c      	beq.n	8002488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4b85      	ldr	r3, [pc, #532]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002476:	2b08      	cmp	r3, #8
 8002478:	d112      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002486:	d10b      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	4b7e      	ldr	r3, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05b      	beq.n	800254c <HAL_RCC_OscConfig+0x108>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d157      	bne.n	800254c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e242      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_OscConfig+0x74>
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a75      	ldr	r2, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e01d      	b.n	80024f4 <HAL_RCC_OscConfig+0xb0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x98>
 80024c2:	4b70      	ldr	r3, [pc, #448]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6f      	ldr	r2, [pc, #444]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6c      	ldr	r2, [pc, #432]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0xb0>
 80024dc:	4b69      	ldr	r3, [pc, #420]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a68      	ldr	r2, [pc, #416]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b66      	ldr	r3, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a65      	ldr	r2, [pc, #404]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fc26 	bl	8000d4c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7fe fc22 	bl	8000d4c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e207      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xc0>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fc12 	bl	8000d4c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252c:	f7fe fc0e 	bl	8000d4c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1f3      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	4b51      	ldr	r3, [pc, #324]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0xe8>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d063      	beq.n	8002622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255a:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256e:	2b08      	cmp	r3, #8
 8002570:	d11c      	bne.n	80025ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002572:	4b44      	ldr	r3, [pc, #272]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d116      	bne.n	80025ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	4b41      	ldr	r3, [pc, #260]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x152>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e1c7      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4937      	ldr	r1, [pc, #220]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	e03a      	b.n	8002622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b4:	4b34      	ldr	r3, [pc, #208]	; (8002688 <HAL_RCC_OscConfig+0x244>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fbc7 	bl	8000d4c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c2:	f7fe fbc3 	bl	8000d4c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1a8      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4925      	ldr	r1, [pc, #148]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCC_OscConfig+0x244>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fba6 	bl	8000d4c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002604:	f7fe fba2 	bl	8000d4c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e187      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d036      	beq.n	800269c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_RCC_OscConfig+0x248>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fb86 	bl	8000d4c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002644:	f7fe fb82 	bl	8000d4c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e167      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_OscConfig+0x240>)
 8002658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x200>
 8002662:	e01b      	b.n	800269c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_OscConfig+0x248>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7fe fb6f 	bl	8000d4c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	e00e      	b.n	8002690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002672:	f7fe fb6b 	bl	8000d4c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d907      	bls.n	8002690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e150      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
 8002684:	40023800 	.word	0x40023800
 8002688:	42470000 	.word	0x42470000
 800268c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002690:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ea      	bne.n	8002672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8097 	beq.w	80027d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ae:	4b81      	ldr	r3, [pc, #516]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b7d      	ldr	r3, [pc, #500]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a7c      	ldr	r2, [pc, #496]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b7a      	ldr	r3, [pc, #488]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b77      	ldr	r3, [pc, #476]	; (80028b8 <HAL_RCC_OscConfig+0x474>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b74      	ldr	r3, [pc, #464]	; (80028b8 <HAL_RCC_OscConfig+0x474>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a73      	ldr	r2, [pc, #460]	; (80028b8 <HAL_RCC_OscConfig+0x474>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fb2b 	bl	8000d4c <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7fe fb27 	bl	8000d4c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e10c      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x474>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x2ea>
 8002720:	4b64      	ldr	r3, [pc, #400]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4a63      	ldr	r2, [pc, #396]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6713      	str	r3, [r2, #112]	; 0x70
 800272c:	e01c      	b.n	8002768 <HAL_RCC_OscConfig+0x324>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b05      	cmp	r3, #5
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x30c>
 8002736:	4b5f      	ldr	r3, [pc, #380]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	4a5e      	ldr	r2, [pc, #376]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	6713      	str	r3, [r2, #112]	; 0x70
 8002742:	4b5c      	ldr	r3, [pc, #368]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4a5b      	ldr	r2, [pc, #364]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6713      	str	r3, [r2, #112]	; 0x70
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0x324>
 8002750:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a57      	ldr	r2, [pc, #348]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
 800275c:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4a54      	ldr	r2, [pc, #336]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002762:	f023 0304 	bic.w	r3, r3, #4
 8002766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d015      	beq.n	800279c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe faec 	bl	8000d4c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe fae8 	bl	8000d4c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e0cb      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ee      	beq.n	8002778 <HAL_RCC_OscConfig+0x334>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe fad6 	bl	8000d4c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fad2 	bl	8000d4c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0b5      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1ee      	bne.n	80027a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027cc:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	4a38      	ldr	r2, [pc, #224]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80027d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80a1 	beq.w	8002924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e2:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d05c      	beq.n	80028a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d141      	bne.n	800287a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_RCC_OscConfig+0x478>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe faa6 	bl	8000d4c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe faa2 	bl	8000d4c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e087      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	019b      	lsls	r3, r3, #6
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	3b01      	subs	r3, #1
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	491b      	ldr	r1, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x478>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe fa7b 	bl	8000d4c <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285a:	f7fe fa77 	bl	8000d4c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e05c      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x416>
 8002878:	e054      	b.n	8002924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_RCC_OscConfig+0x478>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fa64 	bl	8000d4c <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fa60 	bl	8000d4c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e045      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_RCC_OscConfig+0x470>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x444>
 80028a6:	e03d      	b.n	8002924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e038      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40007000 	.word	0x40007000
 80028bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_OscConfig+0x4ec>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d028      	beq.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d121      	bne.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d11a      	bne.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f0:	4013      	ands	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d111      	bne.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	3b01      	subs	r3, #1
 800290a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0cc      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b68      	ldr	r3, [pc, #416]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d90c      	bls.n	8002970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0b8      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	494d      	ldr	r1, [pc, #308]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d044      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d119      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e07f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e067      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4934      	ldr	r1, [pc, #208]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a24:	f7fe f992 	bl	8000d4c <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fe f98e 	bl	8000d4c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e04f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 020c 	and.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1eb      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d20c      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e032      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4916      	ldr	r1, [pc, #88]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	490e      	ldr	r1, [pc, #56]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aba:	f000 f821 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	490a      	ldr	r1, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	5ccb      	ldrb	r3, [r1, r3]
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe f8f2 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08002d58 	.word	0x08002d58
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b04:	b090      	sub	sp, #64	; 0x40
 8002b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b10:	2300      	movs	r3, #0
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b18:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d00d      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x40>
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	f200 80a1 	bhi.w	8002c6c <HAL_RCC_GetSysClockFreq+0x16c>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b32:	e09b      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b38:	e09b      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3a:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b3e:	e098      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b40:	4b4f      	ldr	r3, [pc, #316]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4a:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d028      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b56:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	623b      	str	r3, [r7, #32]
 8002b60:	627a      	str	r2, [r7, #36]	; 0x24
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b6c:	fb03 f201 	mul.w	r2, r3, r1
 8002b70:	2300      	movs	r3, #0
 8002b72:	fb00 f303 	mul.w	r3, r0, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	4a43      	ldr	r2, [pc, #268]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b7a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b80:	460a      	mov	r2, r1
 8002b82:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b86:	4413      	add	r3, r2
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	61fa      	str	r2, [r7, #28]
 8002b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b9a:	f7fd fb15 	bl	80001c8 <__aeabi_uldivmod>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba6:	e053      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	2200      	movs	r2, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	617a      	str	r2, [r7, #20]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bba:	f04f 0b00 	mov.w	fp, #0
 8002bbe:	4652      	mov	r2, sl
 8002bc0:	465b      	mov	r3, fp
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	0159      	lsls	r1, r3, #5
 8002bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd0:	0150      	lsls	r0, r2, #5
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	ebb2 080a 	subs.w	r8, r2, sl
 8002bda:	eb63 090b 	sbc.w	r9, r3, fp
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bf2:	ebb2 0408 	subs.w	r4, r2, r8
 8002bf6:	eb63 0509 	sbc.w	r5, r3, r9
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	00eb      	lsls	r3, r5, #3
 8002c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c08:	00e2      	lsls	r2, r4, #3
 8002c0a:	4614      	mov	r4, r2
 8002c0c:	461d      	mov	r5, r3
 8002c0e:	eb14 030a 	adds.w	r3, r4, sl
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	eb45 030b 	adc.w	r3, r5, fp
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c26:	4629      	mov	r1, r5
 8002c28:	028b      	lsls	r3, r1, #10
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c30:	4621      	mov	r1, r4
 8002c32:	028a      	lsls	r2, r1, #10
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	60fa      	str	r2, [r7, #12]
 8002c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c44:	f7fd fac0 	bl	80001c8 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3740      	adds	r7, #64	; 0x40
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	017d7840 	.word	0x017d7840

08002c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ca8:	f7ff fff0 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0a9b      	lsrs	r3, r3, #10
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08002d68 	.word	0x08002d68

08002ccc <__libc_init_array>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4d0d      	ldr	r5, [pc, #52]	; (8002d04 <__libc_init_array+0x38>)
 8002cd0:	4c0d      	ldr	r4, [pc, #52]	; (8002d08 <__libc_init_array+0x3c>)
 8002cd2:	1b64      	subs	r4, r4, r5
 8002cd4:	10a4      	asrs	r4, r4, #2
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	42a6      	cmp	r6, r4
 8002cda:	d109      	bne.n	8002cf0 <__libc_init_array+0x24>
 8002cdc:	4d0b      	ldr	r5, [pc, #44]	; (8002d0c <__libc_init_array+0x40>)
 8002cde:	4c0c      	ldr	r4, [pc, #48]	; (8002d10 <__libc_init_array+0x44>)
 8002ce0:	f000 f82e 	bl	8002d40 <_init>
 8002ce4:	1b64      	subs	r4, r4, r5
 8002ce6:	10a4      	asrs	r4, r4, #2
 8002ce8:	2600      	movs	r6, #0
 8002cea:	42a6      	cmp	r6, r4
 8002cec:	d105      	bne.n	8002cfa <__libc_init_array+0x2e>
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf4:	4798      	blx	r3
 8002cf6:	3601      	adds	r6, #1
 8002cf8:	e7ee      	b.n	8002cd8 <__libc_init_array+0xc>
 8002cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfe:	4798      	blx	r3
 8002d00:	3601      	adds	r6, #1
 8002d02:	e7f2      	b.n	8002cea <__libc_init_array+0x1e>
 8002d04:	08002d78 	.word	0x08002d78
 8002d08:	08002d78 	.word	0x08002d78
 8002d0c:	08002d78 	.word	0x08002d78
 8002d10:	08002d7c 	.word	0x08002d7c

08002d14 <memcpy>:
 8002d14:	440a      	add	r2, r1
 8002d16:	4291      	cmp	r1, r2
 8002d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d1c:	d100      	bne.n	8002d20 <memcpy+0xc>
 8002d1e:	4770      	bx	lr
 8002d20:	b510      	push	{r4, lr}
 8002d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d2a:	4291      	cmp	r1, r2
 8002d2c:	d1f9      	bne.n	8002d22 <memcpy+0xe>
 8002d2e:	bd10      	pop	{r4, pc}

08002d30 <memset>:
 8002d30:	4402      	add	r2, r0
 8002d32:	4603      	mov	r3, r0
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d100      	bne.n	8002d3a <memset+0xa>
 8002d38:	4770      	bx	lr
 8002d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3e:	e7f9      	b.n	8002d34 <memset+0x4>

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
